import { _ as _export_sfc, o as openBlock, c as createElementBlock, Q as createStaticVNode } from "./chunks/framework.1082274c.js";
const __pageData = JSON.parse('{"title":"Hooks","description":"","frontmatter":{},"headers":[],"relativePath":"guide/hooks.md","filePath":"guide/hooks.md"}'), _sfc_main = { name: "guide/hooks.md" }, _hoisted_1 = /* @__PURE__ */ createStaticVNode(`<h1 id="hooks" tabindex="-1">Hooks <a class="header-anchor" href="#hooks" aria-label="Permalink to &quot;Hooks&quot;">​</a></h1><p>httpYac uses a plugin-based architecture. Most of the features listed in this documentation are implemented as plugins using hooks.</p><p>The plugin architecture makes httpYac flexible and extensible. If you are interested in developing a plugin, check out the <a href="./../plugins/">Plugin Development Guide</a>.</p><h2 id="project-local-hooks" tabindex="-1">Project local hooks <a class="header-anchor" href="#project-local-hooks" aria-label="Permalink to &quot;Project local hooks&quot;">​</a></h2><p>If you need access to the hooks API in your project and don&#39;t want to create a full plugin for it, you can use the <code>httpyac.config.js</code> file:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">configureHooks</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">api</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		api.hooks.responseLogging.</span><span style="color:#B392F0;">addHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;removeSensitiveData&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (response.request) {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> response.request.headers[</span><span style="color:#9ECBFF;">&#39;authorization&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		});</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">configureHooks</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">api</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		api.hooks.responseLogging.</span><span style="color:#6F42C1;">addHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;removeSensitiveData&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">response</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (response.request) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> response.request.headers[</span><span style="color:#032F62;">&#39;authorization&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		});</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>For more information, read the <a href="./../plugins/">Plugin API</a>.</p>`, 7), _hoisted_8 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_8);
}
const hooks = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  hooks as default
};
