import{_ as o,r as p,o as c,c as i,a as s,e as n,b as t,w as e,d as u}from"./app.e649b8aa.js";const l={},r=s("h1",{id:"hooks",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#hooks","aria-hidden":"true"},"#"),n(" Hooks")],-1),d=s("p",null,"httpYac uses a plugin-based architecture. Most of the features listed in this documentation are implemented as plugins using hooks.",-1),k=u(`<h2 id="project-local-hooks" tabindex="-1"><a class="header-anchor" href="#project-local-hooks" aria-hidden="true">#</a> Project local hooks</h2><p>If you need access to the hooks API in your project and don&#39;t want to create a full plugin for it, you can use the <code>httpyac.config.js</code> file:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token function-variable function">configureHooks</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">api</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		api<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>responseLogging<span class="token punctuation">.</span><span class="token function">addHook</span><span class="token punctuation">(</span><span class="token string">&#39;removeSensitiveData&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">delete</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;authorization&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function h(v,m){const a=p("RouterLink");return c(),i("div",null,[r,d,s("p",null,[n("The plugin architecture makes httpYac flexible and extensible. If you are interested in developing a plugin, check out the "),t(a,{to:"/plugins/"},{default:e(()=>[n("Plugin Development Guide")]),_:1}),n(".")]),k,s("p",null,[n("For more information, read the "),t(a,{to:"/plugins/"},{default:e(()=>[n("Plugin API")]),_:1}),n(".")])])}const g=o(l,[["render",h],["__file","hooks.html.vue"]]);export{g as default};
