import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.e3530603.js";
const _imports_0 = "/assets/scripting.8a515e08.svg", __pageData = JSON.parse('{"title":"Scripting","description":"","frontmatter":{},"headers":[{"level":2,"title":"Async/Await or Promise","slug":"async-await-or-promise","link":"#async-await-or-promise","children":[]},{"level":2,"title":"Access to Variables","slug":"access-to-variables","link":"#access-to-variables","children":[]},{"level":2,"title":"Require","slug":"require","link":"#require","children":[]},{"level":2,"title":"Console","slug":"console","link":"#console","children":[]},{"level":2,"title":"Global Scripts","slug":"global-scripts","link":"#global-scripts","children":[]},{"level":2,"title":"Events","slug":"events","link":"#events","children":[]},{"level":2,"title":"Intellij Script","slug":"intellij-script","link":"#intellij-script","children":[]},{"level":2,"title":"How to debug scripts","slug":"how-to-debug-scripts","link":"#how-to-debug-scripts","children":[]}],"relativePath":"guide/scripting.md"}'), _sfc_main = { name: "guide/scripting.md" }, _hoisted_1 = /* @__PURE__ */ createStaticVNode(`<h1 id="scripting" tabindex="-1">Scripting <a class="header-anchor" href="#scripting" aria-hidden="true">#</a></h1><p>It is possible to use NodeJS scripts. All scripts before the request line are executed before the request is called. All scripts after the request line are executed as soon as the response is received. All exports of the script are stored as variables.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">{{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">//pre request script</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">crypto</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">require</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;crypto&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">date</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Date</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">signatureBase64</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">crypto</span><span style="color:var(--shiki-token-function);">.createHmac</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;sha256&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;secret&#39;</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">.update</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">\`</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-constant);">request</span><span style="color:var(--shiki-color-text);">.method</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string-expression);">\\u2028</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-constant);">request</span><span style="color:var(--shiki-color-text);">.url</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string-expression);">\\u2028</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-constant);">date</span><span style="color:var(--shiki-token-function);">.getTime</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string-expression);">\`</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-function);">.digest</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;base64&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.authDate </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">date</span><span style="color:var(--shiki-token-function);">.toUTCString</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.authentcation </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">\`Basic </span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-color-text);">signatureBase64</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string-expression);">\`</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Date</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-token-string);">authDate</span><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Authentication</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-token-string);">authentcation</span><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">{{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// post request script</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">assert</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">require</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;assert&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">test</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;authentcation is valid&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> () </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">assert</span><span style="color:var(--shiki-token-function);">.equal</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">response</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">parsedBody</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">headers</span><span style="color:var(--shiki-color-text);">.Authentication</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> authentcation);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Scripts are executed in a custom context/ execution environment. This context should behave identically to <a href="https://nodejs.org/api/vm.html#what-does-it-mean-to-contextify-an-object" target="_blank" rel="noreferrer">NodeJS Default execution environment</a>, but there may be variations. These can be bypassed using require.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The line break after <code>&#39;{{&#39;</code> is important to distinguish between script execution and variable substitution/ templating.</p></div><h2 id="async-await-or-promise" tabindex="-1">Async/Await or Promise <a class="header-anchor" href="#async-await-or-promise" aria-hidden="true">#</a></h2><p>If the execution of the script is <code>async</code>, it is necessary to export this Promise. In this case, the program waits for the Promise to be completed.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">{{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">wait</span><span style="color:var(--shiki-color-text);">(){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">date</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Date</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sleep</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">10000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">afterDate</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Date</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">afterDate</span><span style="color:var(--shiki-token-function);">.getTime</span><span style="color:var(--shiki-color-text);">() </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">date</span><span style="color:var(--shiki-token-function);">.getTime</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.wait </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">wait</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything?delay=</span><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-color-text);">wait</span><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="access-to-variables" tabindex="-1">Access to Variables <a class="header-anchor" href="#access-to-variables" aria-hidden="true">#</a></h2><p>All Variables already defined can be accessed via the <a href="https://nodejs.org/api/globals.html" target="_blank" rel="noreferrer">global object</a>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Since all variables are placed on the global scope of the script, they may overwrite other variables. Please use unique variable names</p></div><p>In addition to the defined variables and <a href="https://nodejs.org/api/globals.html" target="_blank" rel="noreferrer">NodeJS Global</a>, the following values are also set on global object.</p><table><thead><tr><th>name</th><th>description</th><th>condition</th><th>example</th></tr></thead><tbody><tr><td>$global</td><td>Object which allows storing global Variables</td><td></td><td><a href="../../examples/variables/globalVariables.http">globalVariables.http</a></td></tr><tr><td>$requestClient</td><td><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/requestClient.ts" target="_blank" rel="noreferrer">requestClient</a> to send additional body in streaming event.</td><td></td><td><a href="../../examples/request/requestclient.http">requestClient.http</a></td></tr><tr><td>httpFile</td><td>current <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/httpFile.ts" target="_blank" rel="noreferrer">httpFile</a></td><td>-</td><td><a href="../../examples/script/scriptVariablesHttpFile.http">scriptVariablesHttpFile.http</a></td></tr><tr><td>httpRegion</td><td>current <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/httpRegion.ts" target="_blank" rel="noreferrer">httpRegion</a></td><td>-</td><td><a href="../../examples/script/scriptVariablesHttpRegion.http">scriptVariablesHttpRegion.http</a></td></tr><tr><td>oauth2Session</td><td><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/openIdInformation.ts#L29-L37" target="_blank" rel="noreferrer">OAuth2 Response</a></td><td>only if <a href="/guide/variables.html#oauth2-openid-connect">OAuth2/ OpenId Connect</a> is used</td><td><a href="../../examples/script/scriptVariablesOAuthSession.http">scriptVariablesOAuthSession.http</a></td></tr><tr><td>request</td><td>request of the next <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/httpRequest.ts" target="_blank" rel="noreferrer">http request</a></td><td>-</td><td><a href="../../examples/variables/custom.http">custom.http</a></td></tr><tr><td>response</td><td><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/httpResponse.ts" target="_blank" rel="noreferrer">http response</a> of the last executed request</td><td>only use it in post request scripts or for responses imported with <code>@forceRef</code></td><td><a href="../../examples/script/assert.http">websocket.http</a></td></tr><tr><td>sleep</td><td><a href="https://github.com/AnWeber/httpyac/blob/main/src/utils/promiseUtils.ts#L7" target="_blank" rel="noreferrer">Method</a> to wait for a fixed period of time</td><td>-</td><td><a href="../../examples/request/grpc/grpcClientStreaming.http">grpcClientStreaming.http</a></td></tr><tr><td>test</td><td>method to simplify <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/testFunction.ts#L6-L14" target="_blank" rel="noreferrer">tests</a> (<a href="../../examples/project/tests/assert.http">assert</a> or <a href="../../examples/project/tests/chai.http">chai</a>)</td><td>-</td><td><a href="../../examples/script/test.http">test.http</a></td></tr><tr><td>__dirname</td><td><a href="https://nodejs.org/api/modules.html#__dirname" target="_blank" rel="noreferrer">path to current working directory</a></td><td>-</td><td>-</td></tr><tr><td>__filename</td><td><a href="https://nodejs.org/api/modules.html#__filename" target="_blank" rel="noreferrer">The file name of the current module.</a></td><td>-</td><td>-</td></tr></tbody></table><h2 id="require" tabindex="-1">Require <a class="header-anchor" href="#require" aria-hidden="true">#</a></h2><p>External scripts can be imported using require, but you need to install dependencies yourself.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">{{</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> { </span><span style="color:var(--shiki-token-constant);">authenticate</span><span style="color:var(--shiki-color-text);"> } </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">require</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;./scriptRequire&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">authDate</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Date</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.authDate </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">authDate</span><span style="color:var(--shiki-token-function);">.toUTCString</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.authentication </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">authenticate</span><span style="color:var(--shiki-color-text);">(authDate</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> request);</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Authentication</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-token-string);">authentication</span><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Date</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-token-string);">authDate</span><span style="color:var(--shiki-token-keyword);">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>External dependencies must be installed independently, exceptions are , , and Dependency, which are provided from the extension.</p></div><p>External dependencies must be installed independently, but some dependencies are provided from httpyac:</p><ul><li><a href="https://www.npmjs.com/package/@cloudamqp/amqp-client" target="_blank" rel="noreferrer">@cloudamqp/amqp-client</a></li><li><a href="https://www.npmjs.com/package/@xmldom/xmldom" target="_blank" rel="noreferrer">@xmldom/xmldom</a></li><li><a href="https://www.npmjs.com/package/dayjs" target="_blank" rel="noreferrer">dayjs</a> (<a href="../../examples/script/dayjs.http">example</a>)</li><li><a href="https://www.npmjs.com/package/eventsource" target="_blank" rel="noreferrer">eventsource</a></li><li><a href="https://www.npmjs.com/package/got" target="_blank" rel="noreferrer">got</a></li><li><a href="https://www.npmjs.com/package/@grpc/grpc-js" target="_blank" rel="noreferrer">grpc-js</a> (<a href="../../examples/request/grpc/grpc.http">example</a>)</li><li><a href="https://www.npmjs.com/package/httpyac" target="_blank" rel="noreferrer">httpYac</a></li><li><a href="https://www.npmjs.com/package/mqtt" target="_blank" rel="noreferrer">mqtt</a></li><li><a href="https://nodejs.org/docs/latest/api/" target="_blank" rel="noreferrer">NodeJS API</a> (<a href="../../examples/script/assert.http">example</a>)</li><li><a href="https://www.npmjs.com/package/uuid" target="_blank" rel="noreferrer">uuid</a> (<a href="../../examples/script/uuid.http">example</a>)</li><li><a href="https://www.npmjs.com/package/@types/vscode" target="_blank" rel="noreferrer">vscode</a></li><li><a href="https://www.npmjs.com/package/ws" target="_blank" rel="noreferrer">ws</a></li><li><a href="https://www.npmjs.com/package/xpath" target="_blank" rel="noreferrer">xpath</a> (<a href="../../examples/script/xpath.http">example</a>)</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><a href="https://nodejs.org/api/modules.html#modules_require_cache" target="_blank" rel="noreferrer">NodeJS</a> caches all loaded scripts. Since in VS Code the script is executed in the context of the extension, the content of the script is not reloaded. Therefore, the script must be manually removed from the cache.</p></div><h2 id="console" tabindex="-1">Console <a class="header-anchor" href="#console" aria-hidden="true">#</a></h2><p>The console cannot be accessed in VS Code. Therefore, a separate Console object is provided in the context of the script that redirects the output to the OutputChannel.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">@</span><span style="color:var(--shiki-color-text);">foo </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">https://httpbin.org</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">{{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.info</span><span style="color:var(--shiki-color-text);">(foo);</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="global-scripts" tabindex="-1">Global Scripts <a class="header-anchor" href="#global-scripts" aria-hidden="true">#</a></h2><p>Scripts with no request in the same region are always executed (Global Scripts).</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">{{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.info</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;on every run&#39;</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">###</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/json</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/json</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-hidden="true">#</a></h2><p>The normal script registration is executed in order of occurrence in http File. For the execution of a request, several steps have to be executed besides the actual request: Replace Variables, Prepare Body, Pretty Print Body. With events scripts can be hooked into concrete steps in this process.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line highlighted"><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-color-text);">@response</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.info</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;on every request&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The following events are possible.</p><table><thead><tr><th>Events</th><th>Description</th></tr></thead><tbody><tr><td>request</td><td>event triggered before every request (but after replaceVariableHook)</td></tr><tr><td>streaming</td><td>event triggered while client streaming</td></tr><tr><td>response</td><td>event triggered on response of request</td></tr><tr><td>responseLogging</td><td>event triggered on output of response, used for altering output which is provided with variable response</td></tr><tr><td>after</td><td>event triggered after all request is sent</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The events can be registered automatically globally using <code>+</code>.</p></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line highlighted"><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);">after</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.info</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">\`on every request: </span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-constant);">response</span><span style="color:var(--shiki-color-text);">.statusCode</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string-expression);">\`</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">###</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/json</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>If no event is specified for global registration, the script is executed before every request.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line highlighted"><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-token-keyword);">+</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">console</span><span style="color:var(--shiki-token-function);">.info</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;on every request&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">###</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/json</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/json</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="` + _imports_0 + `" alt="events"></p><h2 id="intellij-script" tabindex="-1">Intellij Script <a class="header-anchor" href="#intellij-script" aria-hidden="true">#</a></h2><p>Intellij Scripts are supported. An <a href="https://www.jetbrains.com/help/idea/http-client-reference.html" target="_blank" rel="noreferrer">Http client</a> and <a href="https://www.jetbrains.com/help/idea/http-response-reference.html" target="_blank" rel="noreferrer">response</a> object corresponding to the interface is created and are available in the script.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The execution environment differs between NodeJS and Intellij (uses Nashorn). Possibly the behavior is not completely identical, to Intellij Execution. If there are problems, please let me know.</p></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line highlighted"><span style="color:var(--shiki-token-keyword);">POST</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Type</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">application/x-www-form-urlencoded</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">accept</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">application/json</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">email=user@domain.loc&amp;password=2</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">&gt; ./intellij.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">POST</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Type</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">application/x-www-form-urlencoded</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">accept</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">application/json</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">email=user@domain.loc&amp;password=3</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">&gt; {% </span><span style="color:var(--shiki-token-constant);">client</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">global</span><span style="color:var(--shiki-token-function);">.set</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;email&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">response</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">body</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">form</span><span style="color:var(--shiki-color-text);">.email); </span><span style="color:var(--shiki-token-keyword);">%</span><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="how-to-debug-scripts" tabindex="-1">How to debug scripts <a class="header-anchor" href="#how-to-debug-scripts" aria-hidden="true">#</a></h2><ol><li>Install httpYac cli with <code>npm install httpyac -g</code></li><li>open Http File in VS Code</li><li>add <a href="https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Statements/debugger" target="_blank" rel="noreferrer">debugger;</a> statement in script</li><li>open <a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_javascript-debug-terminal" target="_blank" rel="noreferrer">Javascript Debug Terminal</a> in VS Code</li><li>execute command <code>httpyac &lt;file&gt; -l &lt;line&gt;</code></li></ol><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">{{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">//pre request script</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">crypto</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">require</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;crypto&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">date</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Date</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">signatureBase64</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">crypto</span><span style="color:var(--shiki-token-function);">.createHmac</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;sha256&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;secret&#39;</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">.update</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">\`</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-constant);">request</span><span style="color:var(--shiki-color-text);">.method</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string-expression);">\\u2028</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-constant);">request</span><span style="color:var(--shiki-color-text);">.url</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string-expression);">\\u2028</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-constant);">date</span><span style="color:var(--shiki-token-function);">.getTime</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string-expression);">\`</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-function);">.digest</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;base64&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">debugger</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.authDate </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">date</span><span style="color:var(--shiki-token-function);">.toUTCString</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.authentcation </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">\`Basic </span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-color-text);">signatureBase64</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string-expression);">\`</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/json</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Date</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-token-string);">authDate</span><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Authentication</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-token-string);">authentcation</span><span style="color:var(--shiki-token-keyword);">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`, 43), _hoisted_44 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_44);
}
const scripting = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  scripting as default
};
