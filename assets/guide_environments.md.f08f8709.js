import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.0a7dd2c9.js";
const __pageData = JSON.parse('{"title":"Environments","description":"","frontmatter":{},"headers":[{"level":2,"title":"JSON","slug":"json","link":"#json","children":[]},{"level":2,"title":"Dotenv","slug":"dotenv","link":"#dotenv","children":[]},{"level":2,"title":"Intellij Environment","slug":"intellij-environment","link":"#intellij-environment","children":[]}],"relativePath":"guide/environments.md"}'), _sfc_main = { name: "guide/environments.md" }, _hoisted_1 = /* @__PURE__ */ createStaticVNode(`<h1 id="environments" tabindex="-1">Environments <a class="header-anchor" href="#environments" aria-hidden="true">#</a></h1><p>An environment is a set of variables. By changing the environment, these variables can be exchanged. This system can be used to support different environments (e.g. dev, test, prod).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>It is possible to select several environments at the same time.</p></div><p>All environment variables are expanded automatically.</p><div class="language-ini line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);"># .env</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">auth_tokenEndpoint=</span><span style="color:var(--shiki-color-text);">{{authHost}}/auth/realms/test/protocol/openid-connect/token</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);"># 9.env</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">authHost=</span><span style="color:var(--shiki-color-text);">https://my.openid.de</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);"># resolved variables</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">authHost=</span><span style="color:var(--shiki-color-text);">https://my.openid.de</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">auth_tokenEndpoint=</span><span style="color:var(--shiki-color-text);">https://my.openid.de/auth/realms/test/protocol/openid-connect/token</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The VS Code extension supports switching to different environments. A different environment can be selected per file. Newly opened files in are opened with the last active environment.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Since rejectUnauthorized and the use of a proxy can be different per environment, they can be set using the special variables <code>request_rejectUnauthorized</code> and <code>request_proxy</code>.</p></div><h2 id="json" tabindex="-1">JSON <a class="header-anchor" href="#json" aria-hidden="true">#</a></h2><p>Environments can be provided with setting <code>environments</code> in <a href="/config/">.httpyac.js</a> . All settings with key <code>$shared</code> are shared between all environments All settings with key <code>$default</code> are used only if no environment is selected</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;$shared&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;host&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;https://mydoman&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;dev&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;user&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;mario&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;password&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;123456&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;prod&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;user&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;mario&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;password&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;password$ecure123&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>A setting <code>environmentVariables</code> is supported in VS Code setting. It is automatically monitored and when changes are made, the environment is reinitialized.</p></div><h2 id="dotenv" tabindex="-1">Dotenv <a class="header-anchor" href="#dotenv" aria-hidden="true">#</a></h2><p><a href="https://www.npmjs.com/package/dotenv" target="_blank" rel="noreferrer">dotenv</a> support is enabled by default.</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">authHost</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string);">https://my.openid.de</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">auth_tokenEndpoint</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string);">https://my.openid.de/auth/realms/test/protocol/openid-connect/token</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>You can specify environments by pre pending or appending a environment identifier</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">.env                </span><span style="color:var(--shiki-token-comment);"># global variables</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">.env.local          </span><span style="color:var(--shiki-token-comment);"># variables only used in env local</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">local.env           </span><span style="color:var(--shiki-token-comment);"># variables only used in env local</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The .env files are searched from the following locations:</p><ul><li>same location as *.http file</li><li><a href="/config/#project-root">project root</a></li><li><code>env</code> folder in <a href="/config/#project-root">project root</a></li><li>value of global environment variable <code>HTTPYAC_ENV</code></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>httpYac tries to detect changes in .env files and clean the cache. However, if the change is made outside of VS Code, command <code>httpyac.reset</code> must be run manually.</p></div><h2 id="intellij-environment" tabindex="-1">Intellij Environment <a class="header-anchor" href="#intellij-environment" aria-hidden="true">#</a></h2><p><a href="https://www.jetbrains.com/help/idea/exploring-http-syntax.html#environment-variables" target="_blank" rel="noreferrer">Intellij Environment Variables</a> support is enabled by default.</p><p>The <code>http-client.env.json</code> and <code>http-client.private.env.json</code> files are searched from the following locations:</p><ul><li>same location as *.http file</li><li><a href="/config/#project-root">project root</a></li><li><code>env</code> folder in <a href="/config/#project-root">project root</a></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>httpYac tries to detect changes in .env files and clean the cache. However, if the change is made outside of VS Code, command <code>httpyac.reset</code> must be run manually.</p></div>`, 24), _hoisted_25 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_25);
}
const environments = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  environments as default
};
