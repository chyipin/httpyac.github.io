import{r,o as p,c as l,a as e,b as t,w as i,F as c,d as a,e as s}from"./app.2e019971.js";import{_ as h}from"./plugin-vue_export-helper.21dcd24c.js";var d="/assets/scripting.8a515e08.svg";const u={},b=a(`<h1 id="scripting" tabindex="-1"><a class="header-anchor" href="#scripting" aria-hidden="true">#</a> Scripting</h1><p>It is possible to use NodeJS scripts. All scripts before the request line are executed before the request is called. All scripts after the request line are executed as soon as the response is received. All exports of the script are stored as variables.</p><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code>{{
  //pre request script
  const crypto = require(&#39;crypto&#39;);
  const date = new Date();
  const signatureBase64 = crypto.createHmac(&#39;sha256&#39;, &#39;secret&#39;)
  .update(\`\${request.method}\\u2028\${request.url}\\u2028\${date.getTime()}\`).digest(&quot;base64&quot;);
  exports.authDate = date.toUTCString();
  exports.authentcation = \`Basic \${signatureBase64}\`;
}}
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://httpbin.org/anything</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">{{authDate}}</span></span>
<span class="token header"><span class="token header-name keyword">Authentication</span><span class="token punctuation">:</span> <span class="token header-value">{{authentcation}}</span></span>

{{
  // post request script
  const assert = require(&#39;assert&#39;);
  test(&quot;authentcation is valid&quot;, () =&gt; {
    assert.equal(response.parsedBody.headers.Authentication, authentcation);
  });
}}
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>`,3),m={class:"custom-container warning"},_=e("p",{class:"custom-container-title"},"WARNING",-1),g=s("Scripts are executed in a custom context/ execution environment. This context should behave identically to "),v={href:"https://nodejs.org/api/vm.html#what-does-it-mean-to-contextify-an-object",target:"_blank",rel:"noopener noreferrer"},f=s("NodeJS Default execution environment"),k=s(", but there may be variations. These can be bypassed using require."),y=a(`<h2 id="async-await-or-promise" tabindex="-1"><a class="header-anchor" href="#async-await-or-promise" aria-hidden="true">#</a> Async/Await or Promise</h2><p>If the execution of the script is <code>async</code>, it is necessary to export this Promise. In this case, the program waits for the Promise to be completed.</p><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code>{{
  async function wait(){
    const date = new Date();
    await sleep(10000);
    const afterDate = new Date();
    return afterDate.getTime() - date.getTime();
  }
  exports.wait = wait();
}}
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://httpbin.org/anything?delay={{wait}}</span> <span class="token http-version property">HTTP/1.1</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="access-to-variables" tabindex="-1"><a class="header-anchor" href="#access-to-variables" aria-hidden="true">#</a> Access to Variables</h2><p>All Variables already defined can be accessed via the global scope.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Since all variables are placed on the global scope of the script, they may overwrite other variables. Please use unique variable names</p></div><p>In addition to the defined variables, the following values are also set on global scope</p>`,7),q=e("thead",null,[e("tr",null,[e("th",null,"name"),e("th",null,"description"),e("th",null,"condition"),e("th",null,"example")])],-1),w=e("td",null,"amqpClient",-1),x=s("currently active "),T={href:"https://cloudamqp.github.io/amqp-client.js/classes/AMQPClient.html",target:"_blank",rel:"noopener noreferrer"},j=s("AMQP Client"),S=e("td",null,"if amqp client is active",-1),P={href:"https://github.com/httpyac/httpyac.github.io/blob/main/examples/request/rabbitmq/consumeScript.http",target:"_blank",rel:"noopener noreferrer"},A=s("consumeScript.http"),C=e("td",null,"amqpChannel",-1),I=s("currently active "),H={href:"https://cloudamqp.github.io/amqp-client.js/classes/AMQPChannel.html",target:"_blank",rel:"noopener noreferrer"},D=s("AMQP Channel"),E=e("td",null,"if amqp client is active",-1),G={href:"https://github.com/httpyac/httpyac.github.io/blob/main/examples/request/rabbitmq/consumeScript.http",target:"_blank",rel:"noopener noreferrer"},R=s("consumeScript.http"),N=e("td",null,"grpcStream",-1),V=s("currently active "),W={href:"https://nodejs.org/api/stream.html#writable-streams",target:"_blank",rel:"noopener noreferrer"},L=s("Grpc Writable Stream"),B=e("td",null,"only if grpc stream is active",-1),F={href:"https://github.com/httpyac/httpyac.github.io/blob/main/examples/request/grpc/grpcClientStreaming.http",target:"_blank",rel:"noopener noreferrer"},$=s("grpcClientStreaming.http"),O=e("td",null,"httpFile",-1),J=s("current "),M={href:"https://github.com/AnWeber/httpyac/blob/main/src/models/httpFile.ts",target:"_blank",rel:"noopener noreferrer"},Q=s("httpFile"),U=e("td",null,"-",-1),Y={href:"https://github.com/httpyac/httpyac.github.io/blob/main/examples/script/scriptVariablesHttpFile.http",target:"_blank",rel:"noopener noreferrer"},z=s("scriptVariablesHttpFile.http"),K=e("td",null,"httpRegion",-1),X=s("current "),Z={href:"https://github.com/AnWeber/httpyac/blob/main/src/models/httpRegion.ts",target:"_blank",rel:"noopener noreferrer"},ee=s("httpRegion"),se=e("td",null,"-",-1),te={href:"https://github.com/httpyac/httpyac.github.io/blob/main/examples/script/scriptVariablesHttpRegion.http",target:"_blank",rel:"noopener noreferrer"},ne=s("scriptVariablesHttpRegion.http"),ae=e("td",null,"mqttClient",-1),re=s("currently active "),oe={href:"https://github.com/mqttjs/MQTT.js#example",target:"_blank",rel:"noopener noreferrer"},pe=s("MQTT Client"),le=e("td",null,"only if mqtt client is active",-1),ie={href:"https://github.com/httpyac/httpyac.github.io/blob/main/examples/request/mqtt/mqttPublish.http",target:"_blank",rel:"noopener noreferrer"},ce=s("mqttPublish.http"),he=e("td",null,"oauth2Session",-1),de={href:"https://github.com/AnWeber/httpyac/blob/main/src/models/openIdInformation.ts#L5-L13",target:"_blank",rel:"noopener noreferrer"},ue=s("OAuth2 Response"),be=s("only if "),me=s("OAuth2/ OpenId Connect"),_e=s(" is used"),ge={href:"https://github.com/httpyac/httpyac.github.io/blob/main/examples/script/scriptVariablesOAuthSession.http",target:"_blank",rel:"noopener noreferrer"},ve=s("scriptVariablesOAuthSession.http"),fe=e("td",null,"request",-1),ke=s("request of the next "),ye={href:"https://github.com/AnWeber/httpyac/blob/main/src/models/httpRequest.ts",target:"_blank",rel:"noopener noreferrer"},qe=s("http request"),we=e("td",null,"-",-1),xe={href:"https://github.com/httpyac/httpyac.github.io/blob/main/examples/variables/custom.http",target:"_blank",rel:"noopener noreferrer"},Te=s("custom.http"),je=e("td",null,"response",-1),Se={href:"https://github.com/AnWeber/httpyac/blob/main/src/models/httpResponse.ts",target:"_blank",rel:"noopener noreferrer"},Pe=s("http response"),Ae=s(" of the last executed request"),Ce=e("td",null,[s("only use it in post request scripts or for responses imported with "),e("code",null,"@forceRef")],-1),Ie={href:"https://github.com/httpyac/httpyac.github.io/blob/main/examples/script/assert.http",target:"_blank",rel:"noopener noreferrer"},He=s("websocket.http"),De=e("td",null,"sleep",-1),Ee={href:"https://github.com/AnWeber/httpyac/blob/main/src/utils/promiseUtils.ts#L7",target:"_blank",rel:"noopener noreferrer"},Ge=s("Method"),Re=s(" to wait for a fixed period of time"),Ne=e("td",null,"-",-1),Ve={href:"https://github.com/httpyac/httpyac.github.io/blob/main/examples/request/grpc/grpcClientStreaming.http",target:"_blank",rel:"noopener noreferrer"},We=s("grpcClientStreaming.http"),Le=e("td",null,"test",-1),Be=s("method to simplify "),Fe={href:"https://github.com/AnWeber/httpyac/blob/main/src/models/testFunction.ts#L6-L14",target:"_blank",rel:"noopener noreferrer"},$e=s("tests"),Oe=s(" ("),Je={href:"https://github.com/httpyac/httpyac.github.io/blob/main/examples/project/tests/assert.http",target:"_blank",rel:"noopener noreferrer"},Me=s("assert"),Qe=s(" or "),Ue={href:"https://github.com/httpyac/httpyac.github.io/blob/main/examples/project/tests/chai.http",target:"_blank",rel:"noopener noreferrer"},Ye=s("chai"),ze=s(")"),Ke=e("td",null,"-",-1),Xe={href:"https://github.com/httpyac/httpyac.github.io/blob/main/examples/script/test.http",target:"_blank",rel:"noopener noreferrer"},Ze=s("test.http"),es=e("td",null,"websocketClient",-1),ss=s("currently active "),ts={href:"https://www.npmjs.com/package/ws#sending-and-receiving-text-data",target:"_blank",rel:"noopener noreferrer"},ns=s("Websocket Client"),as=e("td",null,"if websocket client is active",-1),rs={href:"https://github.com/httpyac/httpyac.github.io/blob/main/examples/request/websocket/websocket.http",target:"_blank",rel:"noopener noreferrer"},os=s("websocket.http"),ps=a(`<h2 id="require" tabindex="-1"><a class="header-anchor" href="#require" aria-hidden="true">#</a> Require</h2><p>External scripts can be imported using require, but you need to install dependencies yourself.</p><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code>
{{
  const { authenticate } = require(&#39;./scriptRequire&#39;);
  const authDate = new Date();

  exports.authDate = authDate.toUTCString();
  exports.authentication = authenticate(authDate, request);
}}

<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://httpbin.org/anything</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Authentication</span><span class="token punctuation">:</span> <span class="token header-value">{{authentication}}</span></span>
<span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">{{authDate}}</span></span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,3),ls={class:"custom-container tip"},is=e("p",{class:"custom-container-title"},"TIP",-1),cs=s("External dependencies must be installed independently, exceptions are "),hs={href:"https://www.npmjs.com/package/@types/vscode",target:"_blank",rel:"noopener noreferrer"},ds=s("vscode"),us=s(", "),bs={href:"https://www.npmjs.com/package/got",target:"_blank",rel:"noopener noreferrer"},ms=s("got"),_s=s(", "),gs={href:"https://www.npmjs.com/package/@grpc/grpc-js",target:"_blank",rel:"noopener noreferrer"},vs=s("grpc-js"),fs=s(" and "),ks={href:"https://www.npmjs.com/package/httpyac",target:"_blank",rel:"noopener noreferrer"},ys=s("httpYac"),qs=s(" Dependency, which are provided from the extension."),ws={class:"custom-container warning"},xs=e("p",{class:"custom-container-title"},"WARNING",-1),Ts={href:"https://nodejs.org/api/modules.html#modules_require_cache",target:"_blank",rel:"noopener noreferrer"},js=s("NodeJS"),Ss=s(" caches all loaded scripts. Since in VS Code the script is executed in the context of the extension, the content of the script is not reloaded. Therefore, the script must be manually removed from the cache."),Ps=a(`<h2 id="console" tabindex="-1"><a class="header-anchor" href="#console" aria-hidden="true">#</a> Console</h2><p>The console cannot be accessed in VS Code. Therefore, a separate Console object is provided in the context of the script that redirects the output to the OutputChannel.</p><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code>@foo = https://httpbin.org

{{
  console.info(foo);
}}
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> Test</h2><p>You can write easily test scripts in JavaScript. Tests allow you to ensure that your API is working as expected, to establish that integrations between services are functioning reliably, and to verify that new developments haven&#39;t broken any existing functionality. You can also use test code to aid the debugging process when something goes wrong with your API project.</p><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code>
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://httpbin.org/json</span> <span class="token http-version property">HTTP/1.1</span></span>
{{
  const { equal } = require(&#39;assert&#39;);
  test(&#39;status code 200&#39;, () =&gt; {
    equal(response.statusCode, 200);
  });
}}
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code>
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://httpbin.org/json</span> <span class="token http-version property">HTTP/1.1</span></span>

{{
  const { expect } = require(&#39;chai&#39;);
  test(&#39;status code 200&#39;, () =&gt; {
    expect(response.statusCode).to.equal(200)
  });
}}
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,7),As={class:"custom-container tip"},Cs=e("p",{class:"custom-container-title"},"TIP",-1),Is={href:"https://github.com/AnWeber/httpyac/blob/790a1b0409bd9eed6ef0ff26a2fc017952d58231/src/models/testFunction.ts#L6-L14",target:"_blank",rel:"noopener noreferrer"},Hs=s("Auxiliary methods"),Ds=s(" are provided for standard tests such as Status and Content-Type"),Es=a(`<div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code>
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://httpbin.org/json</span> <span class="token http-version property">HTTP/1.1</span></span>
{{
  test.status(200);
}}
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="global-scripts" tabindex="-1"><a class="header-anchor" href="#global-scripts" aria-hidden="true">#</a> Global Scripts</h2><p>Scripts with no request in the same region are always executed (Global Scripts).</p><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code>{{
  console.info(&#39;on every run&#39;)
}}
###
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://httpbin.org/json</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://httpbin.org/json</span> <span class="token http-version property">HTTP/1.1</span></span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h2><p>The normal script registration is executed in order of occurrence in http File. For the execution of a request, several steps have to be executed besides the actual request: Replace Variables, Prepare Body, Pretty Print Body. With events scripts can be hooked into concrete steps in this process.</p><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code>{{@response
  console.info(&quot;on every request&quot;);
}}
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://httpbin.org/json</span> <span class="token http-version property">HTTP/1.1</span></span>
</code></pre><div class="highlight-lines"><div class="highlight-line">\xA0</div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>The following events are possible.</p><table><thead><tr><th>Events</th><th>Description</th></tr></thead><tbody><tr><td>request</td><td>event triggered before every request (but after replaceVariableHook)</td></tr><tr><td>streaming</td><td>event triggered while client streaming</td></tr><tr><td>response</td><td>event triggered on response of request</td></tr><tr><td>responseLogging</td><td>event triggered on output of response, used for altering output which is provided with variable response</td></tr><tr><td>after</td><td>event triggered after all request is sent</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>The events can be registered automatically globally using <code>+</code>.</p></div><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code>{{+after
  console.info(\`on every request: \${response.statusCode}\`);
}}
###
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://httpbin.org/json</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://httpbin.org/json</span> <span class="token http-version property">HTTP/1.1</span></span>
</code></pre><div class="highlight-lines"><div class="highlight-line">\xA0</div><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>If no event is specified for global registration, the script is executed before every request.</p><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code>{{+
  console.info(&quot;on every request&quot;);
}}
###
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://httpbin.org/json</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://httpbin.org/json</span> <span class="token http-version property">HTTP/1.1</span></span>

</code></pre><div class="highlight-lines"><div class="highlight-line">\xA0</div><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="`+d+'" alt="events"></p><h2 id="intellij-script" tabindex="-1"><a class="header-anchor" href="#intellij-script" aria-hidden="true">#</a> Intellij Script</h2>',15),Gs=s("Intellij Scripts are supported. An "),Rs={href:"https://www.jetbrains.com/help/idea/http-client-reference.html",target:"_blank",rel:"noopener noreferrer"},Ns=s("Http client"),Vs=s(" and "),Ws={href:"https://www.jetbrains.com/help/idea/http-response-reference.html",target:"_blank",rel:"noopener noreferrer"},Ls=s("response"),Bs=s(" object corresponding to the interface is created and are available in the script."),Fs=a(`<div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>The execution environment differs between NodeJS and Intellij (uses Nashorn). Possibly the behavior is not completely identical, to Intellij Execution. If there are problems, please let me know.</p></div><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">https://httpbin.org/anything</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span>
<span class="token header"><span class="token header-name keyword">accept</span><span class="token punctuation">:</span> <span class="token header-value">application/json</span></span>

email=user@domain.loc&amp;password=2

&gt; ./intellij.js

<span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">https://httpbin.org/anything</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span>
<span class="token header"><span class="token header-name keyword">accept</span><span class="token punctuation">:</span> <span class="token header-value">application/json</span></span>

email=user@domain.loc&amp;password=3

&gt; {% client.global.set(&quot;email&quot;, response.body.form.email); %}
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Intellij scripts are always executed after request. Scripts before Request Line are ignored</p></div><h2 id="how-to-debug-scripts" tabindex="-1"><a class="header-anchor" href="#how-to-debug-scripts" aria-hidden="true">#</a> How to debug scripts</h2>`,4),$s=e("li",null,[s("Install httpYac cli with "),e("code",null,"npm install httpyac -g")],-1),Os=e("li",null,"open Http File in VS Code",-1),Js=s("add "),Ms={href:"https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Statements/debugger",target:"_blank",rel:"noopener noreferrer"},Qs=s("debugger;"),Us=s(" statement in script"),Ys=s("open "),zs={href:"https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_javascript-debug-terminal",target:"_blank",rel:"noopener noreferrer"},Ks=s("Javascript Debug Terminal"),Xs=s(" in VS Code"),Zs=e("li",null,[s("execute command "),e("code",null,"httpyac <file> -l <line>")],-1),et=a(`<div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code>{{
  //pre request script
  const crypto = require(&#39;crypto&#39;);
  const date = new Date();
  const signatureBase64 = crypto.createHmac(&#39;sha256&#39;, &#39;secret&#39;)
  .update(\`\${request.method}\\u2028\${request.url}\\u2028\${date.getTime()}\`).digest(&quot;base64&quot;);
  debugger;
  exports.authDate = date.toUTCString();
  exports.authentcation = \`Basic \${signatureBase64}\`;
}}
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://httpbin.org/json</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">{{authDate}}</span></span>
<span class="token header"><span class="token header-name keyword">Authentication</span><span class="token punctuation">:</span> <span class="token header-value">{{authentcation}}</span></span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,1);function st(tt,nt){const n=r("ExternalLinkIcon"),o=r("RouterLink");return p(),l(c,null,[b,e("div",m,[_,e("p",null,[g,e("a",v,[f,t(n)]),k])]),y,e("table",null,[q,e("tbody",null,[e("tr",null,[w,e("td",null,[x,e("a",T,[j,t(n)])]),S,e("td",null,[e("a",P,[A,t(n)])])]),e("tr",null,[C,e("td",null,[I,e("a",H,[D,t(n)])]),E,e("td",null,[e("a",G,[R,t(n)])])]),e("tr",null,[N,e("td",null,[V,e("a",W,[L,t(n)])]),B,e("td",null,[e("a",F,[$,t(n)])])]),e("tr",null,[O,e("td",null,[J,e("a",M,[Q,t(n)])]),U,e("td",null,[e("a",Y,[z,t(n)])])]),e("tr",null,[K,e("td",null,[X,e("a",Z,[ee,t(n)])]),se,e("td",null,[e("a",te,[ne,t(n)])])]),e("tr",null,[ae,e("td",null,[re,e("a",oe,[pe,t(n)])]),le,e("td",null,[e("a",ie,[ce,t(n)])])]),e("tr",null,[he,e("td",null,[e("a",de,[ue,t(n)])]),e("td",null,[be,t(o,{to:"/guide/variables.html#oauth2-openid-connect"},{default:i(()=>[me]),_:1}),_e]),e("td",null,[e("a",ge,[ve,t(n)])])]),e("tr",null,[fe,e("td",null,[ke,e("a",ye,[qe,t(n)])]),we,e("td",null,[e("a",xe,[Te,t(n)])])]),e("tr",null,[je,e("td",null,[e("a",Se,[Pe,t(n)]),Ae]),Ce,e("td",null,[e("a",Ie,[He,t(n)])])]),e("tr",null,[De,e("td",null,[e("a",Ee,[Ge,t(n)]),Re]),Ne,e("td",null,[e("a",Ve,[We,t(n)])])]),e("tr",null,[Le,e("td",null,[Be,e("a",Fe,[$e,t(n)]),Oe,e("a",Je,[Me,t(n)]),Qe,e("a",Ue,[Ye,t(n)]),ze]),Ke,e("td",null,[e("a",Xe,[Ze,t(n)])])]),e("tr",null,[es,e("td",null,[ss,e("a",ts,[ns,t(n)])]),as,e("td",null,[e("a",rs,[os,t(n)])])])])]),ps,e("div",ls,[is,e("p",null,[cs,e("a",hs,[ds,t(n)]),us,e("a",bs,[ms,t(n)]),_s,e("a",gs,[vs,t(n)]),fs,e("a",ks,[ys,t(n)]),qs])]),e("div",ws,[xs,e("p",null,[e("a",Ts,[js,t(n)]),Ss])]),Ps,e("div",As,[Cs,e("p",null,[e("a",Is,[Hs,t(n)]),Ds])]),Es,e("p",null,[Gs,e("a",Rs,[Ns,t(n)]),Vs,e("a",Ws,[Ls,t(n)]),Bs]),Fs,e("ol",null,[$s,Os,e("li",null,[Js,e("a",Ms,[Qs,t(n)]),Us]),e("li",null,[Ys,e("a",zs,[Ks,t(n)]),Xs]),Zs]),et],64)}var ot=h(u,[["render",st]]);export{ot as default};
