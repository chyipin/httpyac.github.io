import { _ as _export_sfc, c as createElementBlock, o as openBlock, a4 as createStaticVNode } from "./chunks/framework.CL6Y9brc.js";
const __pageData = JSON.parse('{"title":"Troubleshooting","description":"","frontmatter":{},"headers":[],"relativePath":"guide/troubleshooting.md","filePath":"guide/troubleshooting.md"}'), _sfc_main = { name: "guide/troubleshooting.md" }, _hoisted_1 = /* @__PURE__ */ createStaticVNode(`<h1 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h1><p>This document covers some common httpYac issues and how to resolve them. You should always follow these steps before opening a new issue.</p><h2 id="turn-off-verification-of-self-signed-certificate" tabindex="-1">Turn off verification of self-signed certificate <a class="header-anchor" href="#turn-off-verification-of-self-signed-certificate" aria-label="Permalink to &quot;Turn off verification of self-signed certificate&quot;">​</a></h2><p>Self-signed certificates are not accepted by Node JS. For this reason, certificate verification must be disabled. For individual cases, the following is an option.</p><div class="language-HTTP vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">HTTP</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@no-reject-unauthorized</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> https://client.badssl.com/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">X-ClientCert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> pfx: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">../assets/badssl.com-client.p12</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> passphrase: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">badssl.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>It is also possible to disable the check in general in the <a href="./../config/">.httpyac.js configuration</a></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;https&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;rejectUnauthorized&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="protocol-https-not-supported-expected-http-in-vs-code-with-http-2-0" tabindex="-1">Protocol &quot;https:&quot; not supported. Expected &quot;http:&quot; in VS Code with HTTP/2.0 <a class="header-anchor" href="#protocol-https-not-supported-expected-http-in-vs-code-with-http-2-0" aria-label="Permalink to &quot;Protocol &quot;https:&quot; not supported. Expected &quot;http:&quot; in VS Code with HTTP/2.0&quot;">​</a></h2><p>The cause is the proxy configuration of VS Code. This is set to <code>https.proxysupport=override</code> by default. For the use of http2 a <a href="https://github.com/szmarczak/http2-wrapper" target="_blank" rel="noreferrer">http2wrapper</a> is used. However, this is not recognized <a href="https://github.com/TooTallNate/node-agent-base/blob/master/src/index.ts#L15-L19" target="_blank" rel="noreferrer">correctly</a> when using the <a href="https://github.com/microsoft/vscode-proxy-agent/blob/main/package.json#L32" target="_blank" rel="noreferrer">VS Code Proxy Agent</a>. To work around this behavior, proxy support must be disabled</p><div class="language-ini vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">https.proxysupport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=off</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`, 10), _hoisted_11 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_11);
}
const troubleshooting = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  troubleshooting as default
};
