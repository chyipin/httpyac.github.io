import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.6791da08.js";
const __pageData = JSON.parse('{"title":"Request","description":"","frontmatter":{},"headers":[{"level":2,"title":"Request-Line","slug":"request-line","link":"#request-line","children":[]},{"level":2,"title":"Query Strings","slug":"query-strings","link":"#query-strings","children":[]},{"level":2,"title":"Headers","slug":"headers","link":"#headers","children":[]},{"level":2,"title":"Cookie","slug":"cookie","link":"#cookie","children":[]},{"level":2,"title":"Request Body","slug":"request-body","link":"#request-body","children":[]},{"level":2,"title":"Imported Request Body","slug":"imported-request-body","link":"#imported-request-body","children":[]},{"level":2,"title":"multipart/form-data","slug":"multipart-form-data","link":"#multipart-form-data","children":[]},{"level":2,"title":"GraphQL","slug":"graphql","link":"#graphql","children":[]},{"level":2,"title":"Request Separators","slug":"request-separators","link":"#request-separators","children":[]},{"level":2,"title":"gRPC","slug":"grpc","link":"#grpc","children":[{"level":3,"title":"Protobuf Loader","slug":"protobuf-loader","link":"#protobuf-loader","children":[]},{"level":3,"title":"Unary RPC","slug":"unary-rpc","link":"#unary-rpc","children":[]},{"level":3,"title":"Server Streaming RPC","slug":"server-streaming-rpc","link":"#server-streaming-rpc","children":[]},{"level":3,"title":"Client Streaming RPC","slug":"client-streaming-rpc","link":"#client-streaming-rpc","children":[]},{"level":3,"title":"Bidirectional Streaming RPC","slug":"bidirectional-streaming-rpc","link":"#bidirectional-streaming-rpc","children":[]}]},{"level":2,"title":"Server-Sent Events / EventSource","slug":"server-sent-events-eventsource","link":"#server-sent-events-eventsource","children":[]},{"level":2,"title":"WebSocket","slug":"websocket","link":"#websocket","children":[]},{"level":2,"title":"MQTT","slug":"mqtt","link":"#mqtt","children":[]},{"level":2,"title":"AMQP/ RabbitMQ","slug":"amqp-rabbitmq","link":"#amqp-rabbitmq","children":[{"level":3,"title":"Publish","slug":"publish","link":"#publish","children":[]},{"level":3,"title":"Consume/ Subscribe","slug":"consume-subscribe","link":"#consume-subscribe","children":[]},{"level":3,"title":"Ack/ Nack/ Cancel","slug":"ack-nack-cancel","link":"#ack-nack-cancel","children":[]},{"level":3,"title":"Purge","slug":"purge","link":"#purge","children":[]},{"level":3,"title":"Declare exchange","slug":"declare-exchange","link":"#declare-exchange","children":[]},{"level":3,"title":"Bind/ Unbind queue to exchange","slug":"bind-unbind-queue-to-exchange","link":"#bind-unbind-queue-to-exchange","children":[]},{"level":3,"title":"Bind/ Unbind exchange to exchange","slug":"bind-unbind-exchange-to-exchange","link":"#bind-unbind-exchange-to-exchange","children":[]},{"level":3,"title":"Delete","slug":"delete","link":"#delete","children":[]}]}],"relativePath":"guide/request.md"}'), _sfc_main = { name: "guide/request.md" }, _hoisted_1 = /* @__PURE__ */ createStaticVNode(`<h1 id="request" tabindex="-1">Request <a class="header-anchor" href="#request" aria-hidden="true">#</a></h1><p>An HTTP request starts with a request line followed by optional header fields, message body, response handler, and previous response references.</p><h2 id="request-line" tabindex="-1">Request-Line <a class="header-anchor" href="#request-line" aria-hidden="true">#</a></h2><p>A <a href="https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.1" target="_blank" rel="noreferrer">request line</a> consists of a request method, target and the HTTP protocol version. If the request method is omitted, ‘GET’ will be used as a default. The HTTP protocol version can be also omitted.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://www.google.de </span><span style="color:var(--shiki-token-keyword);">HTTP</span><span style="color:var(--shiki-color-text);">/</span><span style="color:var(--shiki-token-constant);">1.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://www.google.de</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">###</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">https://www.google.de</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The HTTP version is optional. But in this guide I have always added it because of syntax highlighting</p></div><p>If the Http version is specified, this can be used to control the use of HTTP2</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);"># </span><span style="color:var(--shiki-token-function);">no version = http/1.1</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://www.google.de</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://www.google.de </span><span style="color:var(--shiki-token-keyword);">HTTP</span><span style="color:var(--shiki-color-text);">/</span><span style="color:var(--shiki-token-constant);">1.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://www.google.de </span><span style="color:var(--shiki-token-keyword);">HTTP</span><span style="color:var(--shiki-color-text);">/</span><span style="color:var(--shiki-token-constant);">2.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Allowed Requests Methods are:</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>GET</td><td>POST</td><td>PUT</td><td>DELETE</td><td>PATCH</td></tr><tr><td>OPTIONS</td><td>CONNECT</td><td>TRACE</td><td>PROPFIND</td><td>PROPPATCH</td></tr><tr><td>COPY</td><td>MOVE</td><td>LOCK</td><td>UNLOCK</td><td>CHECKOUT</td></tr><tr><td>REPORT</td><td>MERGE</td><td>MKACTIVITY</td><td>MKWORKSPACE</td><td>VERSION-CONTROL</td></tr></tbody></table><p>A request path can be added in the next line</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  /get</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="query-strings" tabindex="-1">Query Strings <a class="header-anchor" href="#query-strings" aria-hidden="true">#</a></h2><p>A <a href="https://datatracker.ietf.org/doc/html/rfc3986#section-3.4" target="_blank" rel="noreferrer">request query</a> may contain any unicode characters except line separators and the ‘#’ symbol.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything?q=httpyac</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"></div></div><p>It is also possible to split the query strings to different subsequent lines.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-color-text);">q=</span><span style="color:var(--shiki-token-string);">httpyac</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&amp;</span><span style="color:var(--shiki-color-text);">ie=</span><span style="color:var(--shiki-token-string);">UTF-8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="headers" tabindex="-1">Headers <a class="header-anchor" href="#headers" aria-hidden="true">#</a></h2><p>Each <a href="https://datatracker.ietf.org/doc/html/rfc7230#section-3.2" target="_blank" rel="noreferrer">header field</a> consists of a case-insensitive field name followed by a colon (‘:’), optional leading whitespace, the field value, and optional trailing whitespace.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Type</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">text/html</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Authorization</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">Bearer token</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>If you use the same headers several times, it is possible to store them in a variable and reuse them.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-comment);">{{</span><span style="color:var(--shiki-token-keyword);">+</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">token</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;test&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.defaultHeaders </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-string-expression);">&#39;Content-Type&#39;</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;text/html&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-string-expression);">&#39;Authorization&#39;</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">\`Bearer </span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-color-text);">token</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string-expression);">\`</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  };</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">}}</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">###</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">...defaultHeaders</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">...defaultHeaders</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-hidden="true">#</a></h2><p><a href="https://www.npmjs.com/package/tough-cookie" target="_blank" rel="noreferrer">CookieJar</a> support is enabled by default. All received <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-5.4" target="_blank" rel="noreferrer">Cookies</a>, previously sent by the server with the Set-Cookie header are automatically sent back. It is possible to send own cookies to the server using cookie header.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/cookies</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Cookie</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">bar=foo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Cookies are only stored In-Memory and are cleared in VS Code with command <code>httpyac.reset</code></p></div><p>It is possible to disable cookie support per request.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line highlighted"><span style="color:var(--shiki-token-comment);"># </span><span style="color:var(--shiki-token-keyword);">@no-cookie-jar</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://www.google.de</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="request-body" tabindex="-1">Request Body <a class="header-anchor" href="#request-body" aria-hidden="true">#</a></h2><p>The <a href="https://datatracker.ietf.org/doc/html/rfc7230#section-3.3" target="_blank" rel="noreferrer">request body</a> can be represented as a simple message or a mixed type message (multipart-form-data).</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">POST</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Type</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">application/x-www-form-urlencoded</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">grant_type=client_credentials</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The first content that is not recognized as a header or query string is interpreted as a request body. After that, no more header or query string can be specified.</p></div><h2 id="imported-request-body" tabindex="-1">Imported Request Body <a class="header-anchor" href="#imported-request-body" aria-hidden="true">#</a></h2><p>A body can also be imported by using <code>&lt; ...</code>.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">POST</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Type</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">application/json</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> ./requestBodyImport.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>If you want to replace variables in the file please import it with <code>&lt;@</code></p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">@</span><span style="color:var(--shiki-color-text);">foo</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string);">&quot;bar&quot;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">POST</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Type</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">application/json</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:var(--shiki-token-keyword);">&lt;@</span><span style="color:var(--shiki-color-text);"> ./requestBodyImport.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>All files are read with UTF-8 encoding. If a different encoding is desired, provide it. All <a href="https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings" target="_blank" rel="noreferrer">encodings</a> supported by NodeJS are available.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">@</span><span style="color:var(--shiki-color-text);">foo</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string);">&quot;bar&quot;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">POST</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Type</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">application/json</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:var(--shiki-token-keyword);">&lt;@</span><span style="color:var(--shiki-token-constant);">latin1</span><span style="color:var(--shiki-color-text);"> ./requestBodyImport.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If the request body is configured in-place, whitespace around it will be trimmed. To send leading or trailing whitespace as part of the request body, send it from a separate file.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can use Variable Substitution in file import.</p></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">@</span><span style="color:var(--shiki-color-text);">assetsDir</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string);">./</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">###</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">POST</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/anything</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Type</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">application/json</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-color-text);">assetsDir</span><span style="color:var(--shiki-token-keyword);">}}</span><span style="color:var(--shiki-color-text);">requestBodyImport.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="multipart-form-data" tabindex="-1">multipart/form-data <a class="header-anchor" href="#multipart-form-data" aria-hidden="true">#</a></h2><p>It is possible to mix inline text with file imports</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">POST</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/post</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Type</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">multipart/form-data; boundary=WebKitFormBoundary</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">--WebKitFormBoundary</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Disposition</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">form-data; name=&quot;text&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">invoice_text</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">--WebKitFormBoundary</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Disposition</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">form-data; name=&quot;title&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">invoice_title</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">--WebKitFormBoundary</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Disposition</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">form-data; name=&quot;invoice&quot;; filename=&quot;invoice.pdf&quot;</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Type</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">application/pdf</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> ./dummy.pdf</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">--WebKitFormBoundary--</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="graphql" tabindex="-1">GraphQL <a class="header-anchor" href="#graphql" aria-hidden="true">#</a></h2><p>GraphQL queries are supported. Parsing Logic will automatically generate a GraphQL request body from the query and the optional variables.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">POST</span><span style="color:var(--shiki-color-text);"> https://api.spacex.land/graphql</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Type</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">application/json</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">query</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">launchesQuery</span><span style="color:var(--shiki-color-text);">($limit: </span><span style="color:var(--shiki-token-constant);">Int</span><span style="color:var(--shiki-token-keyword);">!</span><span style="color:var(--shiki-color-text);">){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  launchesPast(limit: $limit) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    mission_name</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    launch_date_local</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    launch_site {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      site_name_long</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    rocket {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      rocket_name</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      rocket_type</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    ships {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      name</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      home_port</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      image</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">&quot;limit&quot;</span><span style="color:var(--shiki-color-text);">: 10</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>GraphQL fragments are also supported and are included in the body by name.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line highlighted"><span style="color:var(--shiki-token-keyword);">fragment</span><span style="color:var(--shiki-color-text);"> RocketParts </span><span style="color:var(--shiki-token-keyword);">on</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">LaunchRocket</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  rocket_name</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  first_stage {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    cores {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      flight</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      core {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        reuse_count</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        status</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">POST</span><span style="color:var(--shiki-color-text);"> https://api.spacex.land/graphql</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Type</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">application/json</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">query</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">launchesQuery</span><span style="color:var(--shiki-color-text);">($limit: </span><span style="color:var(--shiki-token-constant);">Int</span><span style="color:var(--shiki-token-keyword);">!</span><span style="color:var(--shiki-color-text);">){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  launchesPast(limit: $limit) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    mission_name</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    launch_date_local</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    launch_site {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      site_name_long</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    rocket {</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">...</span><span style="color:var(--shiki-color-text);">RocketParts</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">&quot;limit&quot;</span><span style="color:var(--shiki-color-text);">: 10</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>To import GraphQL File you need to use special GraphQL Import Directive.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">POST</span><span style="color:var(--shiki-color-text);"> https://api.spacex.land/graphql</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Type</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">application/json</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">gql</span><span style="color:var(--shiki-color-text);"> launchesQuery </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">./graphql.gql</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;limit&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">10</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can use Variable Substitution in file import.</p></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">@</span><span style="color:var(--shiki-color-text);">assetsDir</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string);">./</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">POST</span><span style="color:var(--shiki-color-text);"> https://api.spacex.land/graphql</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Content-Type</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">application/json</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">gql</span><span style="color:var(--shiki-color-text);"> launchesQuery </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-token-string);">assetsDir</span><span style="color:var(--shiki-token-keyword);">}}</span><span style="color:var(--shiki-token-string);">graphql.gql</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;limit&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">10</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="request-separators" tabindex="-1">Request Separators <a class="header-anchor" href="#request-separators" aria-hidden="true">#</a></h2><p>Multiple requests defined in a single file must be separated from each other with a request separator symbol. A separator may contain comments.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">https://httpbin.org/post</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">### </span><span style="color:var(--shiki-token-function);">separator</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">https://httpbin.org/post</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Alternatively, the request can also be specified in <a href="https://tools.ietf.org/html/rfc7230#section-3.1.1" target="_blank" rel="noreferrer">RFC 7230</a> Request line format, which also triggers a separation.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/post </span><span style="color:var(--shiki-token-keyword);">HTTP</span><span style="color:var(--shiki-color-text);">/</span><span style="color:var(--shiki-token-constant);">1.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> https://httpbin.org/post </span><span style="color:var(--shiki-token-keyword);">HTTP</span><span style="color:var(--shiki-color-text);">/</span><span style="color:var(--shiki-token-constant);">1.1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Using <code>###</code> Regions without a request can be defined. These global regions are executed and interpreted for all requests within the file. This way <a href="/guide/metaData.html">meta data</a>, <a href="/guide/variables.html">variables</a> and <a href="/guide/scripting.html">scripts</a> can be set for each request.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">@</span><span style="color:var(--shiki-color-text);">host</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string);">https://httpbin.org</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">###</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> /post </span><span style="color:var(--shiki-token-keyword);">HTTP</span><span style="color:var(--shiki-color-text);">/</span><span style="color:var(--shiki-token-constant);">1.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GET</span><span style="color:var(--shiki-color-text);"> /post </span><span style="color:var(--shiki-token-keyword);">HTTP</span><span style="color:var(--shiki-color-text);">/</span><span style="color:var(--shiki-token-constant);">1.1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="grpc" tabindex="-1">gRPC <a class="header-anchor" href="#grpc" aria-hidden="true">#</a></h2><p>It is also possible to send gRPC requests. The same request line format is used as for Http requests, but <code>GRPC</code> must be specified as the request method.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-string-expression);">proto</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">./hello.proto</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GRPC</span><span style="color:var(--shiki-color-text);"> grpcb.in:9000/hello.HelloService/sayHello</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;greeting&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;world&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Own ChannelCredentials can be set simply using header <code>channelCredentials</code>.</p></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-string-expression);">proto</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">./hello.proto</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">{{</span><span style="color:var(--shiki-token-function);">@request</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">grpc</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">require</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;@grpc/grpc-js&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">request</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">headers</span><span style="color:var(--shiki-color-text);">.channelcredentials </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">grpc</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">ChannelCredentials</span><span style="color:var(--shiki-token-function);">.createSsl</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">}}</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GRPC</span><span style="color:var(--shiki-color-text);"> grpcb.in:9001/hello.HelloService/sayHello</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;greeting&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;world&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="protobuf-loader" tabindex="-1">Protobuf Loader <a class="header-anchor" href="#protobuf-loader" aria-hidden="true">#</a></h3><p>To use the gRPC call, the proto file associated with the call must first be loaded. This is loaded using <a href="https://www.npmjs.com/package/@grpc/proto-loader" target="_blank" rel="noreferrer">@grpc/proto-loader</a>. This can be configured using options in the header format</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-string-expression);">proto</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">./hello.proto</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">keepCase: true</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">longs</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">String</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">enums</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">String</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">defaults</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">true</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">oneofs</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">true</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">includeDirs</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">[\`\${__dirname}/request\`]</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GRPC</span><span style="color:var(--shiki-color-text);"> grpcb.in:9000/hello.HelloService/sayHello</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;greeting&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;world&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>The import of the proto file can also be done globally</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-string-expression);">proto</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">./hello.proto</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">###</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GRPC</span><span style="color:var(--shiki-color-text);"> grpcb.in:9000/hello.HelloService/sayHello</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;greeting&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;world&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GRPC</span><span style="color:var(--shiki-color-text);"> grpcb.in:9000/hello.HelloService/sayHello</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;greeting&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;john&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can use Variable Substitution in file import and in proto-loader options.</p></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">@</span><span style="color:var(--shiki-color-text);">assetsDir</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string);">./</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">proto</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-token-string);">assetsDir</span><span style="color:var(--shiki-token-keyword);">}}</span><span style="color:var(--shiki-token-string);">hello.proto</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">keepCase: true</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">longs</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">String</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">enums</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">String</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">defaults</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">true</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">oneofs</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">true</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">includeDirs</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">[\`\${assetsDir}/request\`]</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GRPC</span><span style="color:var(--shiki-color-text);"> grpcb.in:9000/hello.HelloService/sayHello</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;greeting&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;world&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>::: warn IncludeDirs of @grpc/proto-loader currently supports only absolute paths. :::</p><h3 id="unary-rpc" tabindex="-1">Unary RPC <a class="header-anchor" href="#unary-rpc" aria-hidden="true">#</a></h3><p><a href="https://grpc.io/docs/what-is-grpc/core-concepts/#unary-rpc" target="_blank" rel="noreferrer">Unary RPC</a> behaves identically to Http requests. The url need to be in the following format</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">GRPC</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-color-text);">server</span><span style="color:var(--shiki-token-keyword);">}}</span><span style="color:var(--shiki-color-text);">/</span><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-color-text);">service</span><span style="color:var(--shiki-token-keyword);">}}</span><span style="color:var(--shiki-color-text);">/</span><span style="color:var(--shiki-token-keyword);">{{</span><span style="color:var(--shiki-color-text);">method</span><span style="color:var(--shiki-token-keyword);">}}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-string-expression);">proto</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">./hello.proto</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GRPC</span><span style="color:var(--shiki-color-text);"> grpcb.in:9000/hello.HelloService/sayHello</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;greeting&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;world&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Using <a href="/guide/request.html#headers">header notation</a> it is also possible to send meta data.</p><p>Header <code>ChannelCredentials</code> or <code>Authorization</code>are special and defines the <a href="https://grpc.io/docs/guides/auth/#nodejs" target="_blank" rel="noreferrer">authentication</a> used by gRPC. If no such header is specified, <code>grpc.credentials.createInsecure()</code> is used automatically</p><h3 id="server-streaming-rpc" tabindex="-1">Server Streaming RPC <a class="header-anchor" href="#server-streaming-rpc" aria-hidden="true">#</a></h3><p><a href="https://grpc.io/docs/what-is-grpc/core-concepts/#server-streaming-rpc" target="_blank" rel="noreferrer">Server Streaming RPC</a> is similar to a unary RPC, except that the server returns a stream of messages in response to a client’s request.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-string-expression);">proto</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">./hello.proto</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GRPC</span><span style="color:var(--shiki-color-text);"> grpcb.in:9000/hello.HelloService/LotsOfReplies</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;greeting&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;world&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>All responses are output as an intermediate result and summarized at the end as one overall response. If the intermediate results are not needed, they can be deactivated using <code># @noStreamingLog</code>.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-string-expression);">proto</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">./hello.proto</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);"># </span><span style="color:var(--shiki-token-keyword);">@noStreamingLog</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GRPC</span><span style="color:var(--shiki-color-text);"> grpcb.in:9000/hello.HelloService/LotsOfReplies</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;greeting&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;world&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="client-streaming-rpc" tabindex="-1">Client Streaming RPC <a class="header-anchor" href="#client-streaming-rpc" aria-hidden="true">#</a></h3><p><a href="https://grpc.io/docs/what-is-grpc/core-concepts/#client-streaming-rpc" target="_blank" rel="noreferrer">Client Streaming RPC</a> is similar to a unary RPC, except that the client sends a stream of messages to the server instead of a single message. To enable this, a custom script can be used that registers for the @streaming hook. This script must export a Promise at the end of which the client stream is terminated.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-string-expression);">proto</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">./hello.proto</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GRPC</span><span style="color:var(--shiki-color-text);"> grpcb.in:9000/hello.HelloService/lotsOfGreetings</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;greeting&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;world.&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">{{</span><span style="color:var(--shiki-color-text);">@streaming</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">(){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sleep</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">grpcStream</span><span style="color:var(--shiki-token-function);">.write</span><span style="color:var(--shiki-color-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      greeting</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;How are you?&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sleep</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">grpcStream</span><span style="color:var(--shiki-token-function);">.write</span><span style="color:var(--shiki-color-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      greeting</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;I can stream.&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.waitPromise </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To control the wait time more easily, a method <code>sleep</code> is provided that waits the number of milliseconds.</p></div><h3 id="bidirectional-streaming-rpc" tabindex="-1">Bidirectional Streaming RPC <a class="header-anchor" href="#bidirectional-streaming-rpc" aria-hidden="true">#</a></h3><p><a href="https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc" target="_blank" rel="noreferrer">Bidirectional Streaming RPC</a> is a combination of client streaming and server streaming.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-string-expression);">proto</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">./hello.proto</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">GRPC</span><span style="color:var(--shiki-color-text);"> grpcb.in:9000/hello.HelloService/BidiHello</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;greeting&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;world&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">{{</span><span style="color:var(--shiki-color-text);">@streaming</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">(){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sleep</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">grpcStream</span><span style="color:var(--shiki-token-function);">.write</span><span style="color:var(--shiki-color-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      greeting</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;, how are you?&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sleep</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">grpcStream</span><span style="color:var(--shiki-token-function);">.write</span><span style="color:var(--shiki-color-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      greeting</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;, I can stream.&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.waitPromise </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="server-sent-events-eventsource" tabindex="-1">Server-Sent Events / EventSource <a class="header-anchor" href="#server-sent-events-eventsource" aria-hidden="true">#</a></h2><p>By using method <code>SSE</code> an <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource" target="_blank" rel="noreferrer">EventSource</a> instance can be created. This opens a persistent connection to an HTTP server, which sends events in text/event-stream format. Adding the header <code>event</code> the list of events to be output is specified</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">SSE</span><span style="color:var(--shiki-color-text);"> https://express-eventsource.herokuapp.com/events</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">Event</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">data</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">{{</span><span style="color:var(--shiki-color-text);">@streaming</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">(){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sleep</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">10000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.waitPromise </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>The events of the server can be waited for by using <a href="/guide/scripting.html#events">streaming event</a>. As soon as this hook has been successfully processed, the connection is terminated.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">SSE</span><span style="color:var(--shiki-color-text);"> https://express-eventsource.herokuapp.com/events</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Event</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">data</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:var(--shiki-token-comment);">{{</span><span style="color:var(--shiki-color-text);">@streaming</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">(){</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sleep</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">10000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.waitPromise </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-comment);">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Meta Data <code>keepStreaming</code> can be used to respond to events until manually aborted.</p></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line highlighted"><span style="color:var(--shiki-token-comment);"># </span><span style="color:var(--shiki-token-keyword);">@keepStreaming</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">SSE</span><span style="color:var(--shiki-color-text);"> https://express-eventsource.herokuapp.com/events</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Event</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">data</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-hidden="true">#</a></h2><p>By using method <code>WS</code> a <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket" target="_blank" rel="noreferrer">WebSocket connection</a> to a server can be opened. If a body is included in the request, it is sent immediately after the connection is established.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line highlighted"><span style="color:var(--shiki-token-keyword);">WS</span><span style="color:var(--shiki-color-text);"> wss://demo.piesocket.com/v3/channel_1?api_key=oCdCMcMPQpbvNjUIzqtvF1d2X2okWpDQj4AwARJuAgtjhzKxVEjQU6IdCjwm&amp;notify_self</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span><span style="color:var(--shiki-token-keyword);">&quot;foo&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;bar&quot;</span><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">{{</span><span style="color:var(--shiki-color-text);">@streaming</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">(){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sleep</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">10000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">websocketClient</span><span style="color:var(--shiki-token-function);">.send</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;Hello World&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sleep</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.waitPromise </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>The events of the server can be waited for by using <a href="/guide/scripting.html#events">streaming event</a>. As soon as this hook has been successfully processed, the connection is terminated. Within the <code>streaming</code> block it is possible to send further message using <a href="https://www.npmjs.com/package/ws#sending-and-receiving-text-data" target="_blank" rel="noreferrer"><code>websocketClient</code></a>.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">WS</span><span style="color:var(--shiki-color-text);"> wss://demo.piesocket.com/v3/channel_1?api_key=oCdCMcMPQpbvNjUIzqtvF1d2X2okWpDQj4AwARJuAgtjhzKxVEjQU6IdCjwm&amp;notify_self</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span><span style="color:var(--shiki-token-keyword);">&quot;foo&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;bar&quot;</span><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">{{</span><span style="color:var(--shiki-color-text);">@streaming</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">(){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sleep</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">10000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">websocketClient</span><span style="color:var(--shiki-token-function);">.send</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;Hello World&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sleep</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.waitPromise </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Meta Data <code>keepStreaming</code> can be used to respond to events until manually aborted.</p></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line highlighted"><span style="color:var(--shiki-token-comment);"># </span><span style="color:var(--shiki-token-keyword);">@keepStreaming</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">WS</span><span style="color:var(--shiki-color-text);"> wss://demo.piesocket.com/v3/channel_1?api_key=oCdCMcMPQpbvNjUIzqtvF1d2X2okWpDQj4AwARJuAgtjhzKxVEjQU6IdCjwm&amp;notify_self</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>All received messages are output as an intermediate result and summarized at the end as one overall response. If the intermediate results are not needed, they can be deactivated using <code># @noStreamingLog</code>.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If special options are needed for initialization, they can be configured in a NodeJS script using <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/httpRequest.ts#L26" target="_blank" rel="noreferrer"><code>request.options</code></a>.</p></div><h2 id="mqtt" tabindex="-1">MQTT <a class="header-anchor" href="#mqtt" aria-hidden="true">#</a></h2><p>By using method <code>MQTT</code> a MQTT Client can be created. <a href="https://github.com/mqttjs/MQTT.js" target="_blank" rel="noreferrer">MQTT.js</a> opens a TCP or WebSocket Connection to a MQTT Broker. The header <code>Topic</code> specifies the topic to be registered (multiple specification allowed)</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-comment);"># </span><span style="color:var(--shiki-token-keyword);">@keepStreaming</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">MQTT tcp://broker.hivemq.com</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Topic</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">testtopic/1</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Topic</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">testtopic/2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>If a body is specified, it will be published immediately after connecting.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-color-text);">MQTT tcp://broker.hivemq.com</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Topic</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">testtopic/1</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">Hello, World</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If the topic used for publishing is different from the topic used for replying, the headers <code>subscribe</code> and <code>publish</code> can be used instead.</p></div><p>The messages of the server can be waited for using <a href="/guide/scripting.html#events">streaming event</a>. As soon as this hook has been successfully processed, the connection is terminated. Within the <code>streaming</code> block it is possible to publish further message using <a href="https://github.com/mqttjs/MQTT.js#publish" target="_blank" rel="noreferrer"><code>mqttClient</code></a>.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-color-text);">MQTT tcp://broker.hivemq.com</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Topic</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">testtopic/1</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">{{</span><span style="color:var(--shiki-color-text);">@streaming</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">(){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sleep</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">mqttClient</span><span style="color:var(--shiki-token-function);">.publish</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;testtopic/1&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;Hello World&#39;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sleep</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.waitPromise </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Meta Data <code>keepStreaming</code> can be used to respond to events until manually aborted.</p></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line highlighted"><span style="color:var(--shiki-token-comment);"># </span><span style="color:var(--shiki-token-keyword);">@keepStreaming</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">MQTT tcp://broker.hivemq.com</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Topic</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">testtopic/1</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Topic</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">testtopic/2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>All received messages are output as an intermediate result and summarized at the end as one overall response. If the intermediate results are not needed, they can be deactivated using <code># @noStreamingLog</code>.</p></div><p><a href="https://github.com/mqttjs/MQTT.js#qos" target="_blank" rel="noreferrer">QoS</a>, <a href="https://github.com/mqttjs/MQTT.js#mqttclientstreambuilder-options" target="_blank" rel="noreferrer">retain, username, password, keepAlive (10seconds default) and clean</a> can be configured using header notation.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-comment);"># </span><span style="color:var(--shiki-token-keyword);">@keepStreaming</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">MQTT tcp://broker.hivemq.com</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Topic</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">testtopic/1</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">Qos</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">1</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">username</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">foo</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">password</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">bar</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If more options are needed for the initialization, they could be configured in a NodeJS script using <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/httpRequest.ts#L36" target="_blank" rel="noreferrer"><code>request.options</code></a>.</p></div><p>As long as the connection of the MQTT instance to the MessageQueue exists, messages can also be published from other NodeJS blocks.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-comment);"># </span><span style="color:var(--shiki-token-keyword);">@keepStreaming</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">MQTT tcp://broker.hivemq.com</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">Topic</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">testtopic/1</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">###</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"># </span><span style="color:var(--shiki-token-keyword);">@name</span><span style="color:var(--shiki-token-comment);"> test</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">{{</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">mqttClient</span><span style="color:var(--shiki-token-function);">.publish</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;testtopic/1&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;hello johnny&#39;</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="amqp-rabbitmq" tabindex="-1">AMQP/ RabbitMQ <a class="header-anchor" href="#amqp-rabbitmq" aria-hidden="true">#</a></h2><p>By using method <code>AMQP</code> a AMQP Client can be created. <a href="https://github.com/cloudamqp/amqp-client.js" target="_blank" rel="noreferrer">@cloudamqp/amqp-client</a> opens a AMQP Connection to RabbitMQ Server. Following Methods can be used</p><h3 id="publish" tabindex="-1">Publish <a class="header-anchor" href="#publish" aria-hidden="true">#</a></h3><p>Publish a new message to an exchange. Header <code>amqp_exchange</code> defines the used exchange. <code>amqp_routing_key</code> is optional and sets the used routing key</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_method</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">publish</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_exchange</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_exchange</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_routing_key</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">command.send</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;test&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;{{$uuid}}&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>A direct publish to a queue is available using <code>amqp_queue</code>.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_queue</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_queue</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;test&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;test&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If no amqp_method header is present and a body is provided. publish is used as default</p></div><p>The following headers can also be defined</p><table><thead><tr><th>Header</th><th>Description</th></tr></thead><tbody><tr><td>amqp_contentType</td><td>content type of body, eg. application/json</td></tr><tr><td>amqp_contentEncoding</td><td>content encoding of body, eg. gzip</td></tr><tr><td>amqp_delivery_mode</td><td>1 for transient messages, 2 for persistent messages</td></tr><tr><td>amqp_priority</td><td>between 0 and 255</td></tr><tr><td>amqp_correlation_id</td><td>for RPC requests</td></tr><tr><td>amqp_replyTo</td><td>for RPC requests</td></tr><tr><td>amqp_expiration</td><td>Message TTL, in milliseconds, as string</td></tr><tr><td>amqp_message_id</td><td>messageId</td></tr><tr><td>amqp_user_id</td><td>userId</td></tr><tr><td>amqp_type</td><td>type</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>All other headers that do not start with <code>amqp_</code> are appended to the message as headers</p></div><h3 id="consume-subscribe" tabindex="-1">Consume/ Subscribe <a class="header-anchor" href="#consume-subscribe" aria-hidden="true">#</a></h3><p>Consume messages from a queue. Messages will be delivered asynchronously. The messages of the server can be waited for by using <a href="/guide/scripting.html#events">streaming event</a>. As soon as this hook has been successfully processed, the connection is terminated. Within the <code>streaming</code> block it is possible to access additional methods of a <a href="https://cloudamqp.github.io/amqp-client.js/classes/AMQPChannel.html" target="_blank" rel="noreferrer">AMQPChannel using <code>amqpChannel</code></a>.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-comment);"># </span><span style="color:var(--shiki-token-keyword);">@keepStreaming</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_method</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">consume</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_queue</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_queue</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Meta Data <code>keepStreaming</code> can be used to consume message until manually aborted.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If no amqp_method header is present and no body is provided. consume is used as default</p></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_queue</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_queue</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">{{</span><span style="color:var(--shiki-color-text);">@streaming</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">(){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sleep</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">10000</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);">.waitPromise </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeStream</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>All received messages are output as an intermediate result and summarized at the end as one overall response. If the intermediate results are not needed, they can be deactivated using <code># @noStreamingLog</code>.</p></div><p>The following headers can also be defined</p><table><thead><tr><th>Header</th><th>Description</th></tr></thead><tbody><tr><td>amqp_tag</td><td>tag of the consumer, will be server generated if left empty</td></tr><tr><td>amqp_no_ack</td><td>f messages are removed from the server upon delivery, or have to be acknowledged</td></tr><tr><td>amqp_exclusive</td><td>if this can be the only consumer of the queue, will return an Error if there are other consumers to the queue already</td></tr></tbody></table><h3 id="ack-nack-cancel" tabindex="-1">Ack/ Nack/ Cancel <a class="header-anchor" href="#ack-nack-cancel" aria-hidden="true">#</a></h3><p>Consumed messages are not acked/ nacked automatically. If a message needs to get acked/ nacked automatically a manual ack/ nack needs to be called. You need to declare the same channelId (<code>amqp_channel_id</code>) and deliveryTag (<code>amqp_tag</code>) as the consumer.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_method</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">ack</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_channel_id</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">1</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_tag</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_method</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">nack</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_channel_id</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">1</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_tag</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_method</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">cancel</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_channel_id</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">1</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_tag</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The following headers can also be defined</p><table><thead><tr><th>Header</th><th>Description</th></tr></thead><tbody><tr><td>amqp_requeue</td><td>if the message should be requeued or removed</td></tr><tr><td>amqp_multiple</td><td>batch confirm all messages up to this delivery tag</td></tr></tbody></table><h3 id="purge" tabindex="-1">Purge <a class="header-anchor" href="#purge" aria-hidden="true">#</a></h3><p>Purge all messages of a queue</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_method</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">purge</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_queue</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_queue</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="declare-exchange" tabindex="-1">Declare exchange <a class="header-anchor" href="#declare-exchange" aria-hidden="true">#</a></h3><p>Declare a queue or exchange</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_method</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">declare</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_exchange</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_exchange</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_method</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">declare</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_queue</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_queue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><table><thead><tr><th>Header</th><th>Description</th></tr></thead><tbody><tr><td>amqp_passive</td><td>if the exchange name doesn&#39;t exists the channel will be closed with an error, fulfilled if the exchange name does exists</td></tr><tr><td>amqp_durable</td><td>if the exchange should survive server restarts</td></tr><tr><td>amqp_auto_delete</td><td>if the exchange should be deleted when the last binding from it is deleted</td></tr><tr><td>amqp_exclusive</td><td>if the queue should be deleted when the channel is closed</td></tr></tbody></table><h3 id="bind-unbind-queue-to-exchange" tabindex="-1">Bind/ Unbind queue to exchange <a class="header-anchor" href="#bind-unbind-queue-to-exchange" aria-hidden="true">#</a></h3><p>Bind and unbind queue of a exchange</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_method</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">bind</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_exchange</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_exchange</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_queue</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_queue</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_routing_key</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">command.send</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_method</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">unbind</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_exchange</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_exchange</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_queue</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_queue</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_routing_key</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">command.send</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="bind-unbind-exchange-to-exchange" tabindex="-1">Bind/ Unbind exchange to exchange <a class="header-anchor" href="#bind-unbind-exchange-to-exchange" aria-hidden="true">#</a></h3><p>Create or delete an Exchange to exchange binding</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_method</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">bind</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_exchange</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_exchange</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_exchange_destination</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_exchange2</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_routing_key</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">command.send</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_method</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">unbind</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_exchange</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_exchange</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_queue</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_queue</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_routing_key</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">command.send</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="delete" tabindex="-1">Delete <a class="header-anchor" href="#delete" aria-hidden="true">#</a></h3><p>Delete an exchange or queue</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-string-expression);">amqp_method</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">delete</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_exchange</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_exchange</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">AMQP</span><span style="color:var(--shiki-color-text);"> amqp://guest:guest@localhost</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_method</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">delete</span></span>
<span class="line"><span style="color:var(--shiki-token-string-expression);">amqp_queue</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string);">httpyac_queue</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><table><thead><tr><th>Header</th><th>Description</th></tr></thead><tbody><tr><td>amqp_if_unused</td><td>only delete if the exchange doesn&#39;t have any bindings</td></tr><tr><td>amqp_if_empty</td><td>only delete if the queue is empty</td></tr></tbody></table>`, 172), _hoisted_173 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_173);
}
const request = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  request as default
};
