import { _ as _export_sfc, o as openBlock, c as createElementBlock, Q as createStaticVNode } from "./chunks/framework.1082274c.js";
const _imports_0 = "/assets/parse_flow.3426f319.svg", _imports_1 = "/assets/send_flow.e379ca24.svg", _imports_2 = "/assets/execute_flow.7ea97810.svg", __pageData = JSON.parse('{"title":"Plugin Development Guide","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/index.md","filePath":"plugins/index.md"}'), _sfc_main = { name: "plugins/index.md" }, _hoisted_1 = /* @__PURE__ */ createStaticVNode(`<h1 id="plugin-development-guide" tabindex="-1">Plugin Development Guide <a class="header-anchor" href="#plugin-development-guide" aria-label="Permalink to &quot;Plugin Development Guide&quot;">​</a></h1><h2 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting started&quot;">​</a></h2><p>A httpYac plugin is an npm package that can add additional features to the project using httpYac. These features can include:</p><ul><li>provide additional environments</li><li>remove sensitive information from logging</li><li>provide additional variable substitution</li><li>add new parser logic and actions</li></ul><p>As an npm package, CLI plugin must have a <code>package.json</code> file. It&#39;s also recommended to have a plugin description in <code>README.md</code> to help others find your plugin on npm.</p><p>So, typical CLI plugin folder structure looks like the following:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">.</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">README.md</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.js</span><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># service plugin</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">package.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">.</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">README.md</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.js</span><span style="color:#24292E;">      </span><span style="color:#6A737D;"># service plugin</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">package.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="naming-and-discoverability" tabindex="-1">Naming and Discoverability <a class="header-anchor" href="#naming-and-discoverability" aria-label="Permalink to &quot;Naming and Discoverability&quot;">​</a></h2><p>For a plugin to be usable in a httpYac project, it must follow the name convention <code>httpyac-plugin-&lt;name&gt;</code> or <code>@scope/httpyac-plugin-&lt;name&gt;</code>. It allows your plugin to be:</p><ul><li>Discoverable by httpYac;</li><li>Discoverable by other developers via searching;</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Make sure to name the plugin correctly, otherwise it will be impossible to find it with httpYac plugins search!</p></div><p>For better discoverability when a user searches for your plugin, put keywords describing your plugin in the <code>description</code> field of the plugin <code>package.json</code> file.</p><p>Example:</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;httpyac-plugin-keystore&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0.7.7&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;description&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;httpyac plugin to add keystore support to variables&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;httpyac-plugin-keystore&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;version&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0.7.7&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;description&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;httpyac plugin to add keystore support to variables&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\`</p><h2 id="service-plugin" tabindex="-1">Service Plugin <a class="header-anchor" href="#service-plugin" aria-label="Permalink to &quot;Service Plugin&quot;">​</a></h2><p>Service plugin serves for extending hooks on every httpyac execution.</p><p>Service plugins are loaded automatically when a Service instance is created - i.e. every time the <code>httpyac</code> command is invoked inside a project. It&#39;s located in the <code>index.js</code> file in httpyac plugin root folder.</p><p>A service plugin should export a function which receives one arguments:</p><ul><li>A <a href="./plugin-api.html">PluginAPI</a> instance</li></ul><p>The minimal required code in the service plugin file is the following:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="parsing-flowchart" tabindex="-1">Parsing FlowChart <a class="header-anchor" href="#parsing-flowchart" aria-label="Permalink to &quot;Parsing FlowChart&quot;">​</a></h2><p><img src="` + _imports_0 + '" alt="parse flow"></p><h2 id="sending-flowchart" tabindex="-1">Sending FlowChart <a class="header-anchor" href="#sending-flowchart" aria-label="Permalink to &quot;Sending FlowChart&quot;">​</a></h2><p><img src="' + _imports_1 + '" alt="send flow"></p><h2 id="execute-http-region-flowchart" tabindex="-1">Execute Http Region FlowChart <a class="header-anchor" href="#execute-http-region-flowchart" aria-label="Permalink to &quot;Execute Http Region FlowChart&quot;">​</a></h2><p><img src="' + _imports_2 + '" alt="execute flow"></p>', 28), _hoisted_29 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_29);
}
const index = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  index as default
};
