import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.0d2193d6.js";
const __pageData = JSON.parse('{"title":"Plugin API","description":"","frontmatter":{},"headers":[{"level":2,"title":"version","slug":"version","link":"#version","children":[]},{"level":2,"title":"rootDir","slug":"rootdir","link":"#rootdir","children":[]},{"level":2,"title":"httpFile","slug":"httpfile","link":"#httpfile","children":[]},{"level":2,"title":"config","slug":"config","link":"#config","children":[]},{"level":2,"title":"log","slug":"log","link":"#log","children":[]},{"level":2,"title":"fileProvider","slug":"fileprovider","link":"#fileprovider","children":[]},{"level":2,"title":"sessionStore","slug":"sessionstore","link":"#sessionstore","children":[]},{"level":2,"title":"userInteractionProvider","slug":"userinteractionprovider","link":"#userinteractionprovider","children":[]},{"level":2,"title":"getHookCancel","slug":"gethookcancel","link":"#gethookcancel","children":[]},{"level":2,"title":"hooks","slug":"hooks","link":"#hooks","children":[{"level":3,"title":"ParseHook","slug":"parsehook","link":"#parsehook","children":[]},{"level":3,"title":"ParseEndRegionHook","slug":"parseendregionhook","link":"#parseendregionhook","children":[]},{"level":3,"title":"ReplaceVariableHook","slug":"replacevariablehook","link":"#replacevariablehook","children":[]},{"level":3,"title":"ProvideVariablesHook","slug":"providevariableshook","link":"#providevariableshook","children":[]},{"level":3,"title":"ProvideEnvironmentsHook","slug":"provideenvironmentshook","link":"#provideenvironmentshook","children":[]},{"level":3,"title":"OnRequest Hook","slug":"onrequest-hook","link":"#onrequest-hook","children":[]},{"level":3,"title":"OnResponse Hook","slug":"onresponse-hook","link":"#onresponse-hook","children":[]},{"level":3,"title":"ResponseLoggingHook","slug":"responselogginghook","link":"#responselogginghook","children":[]}]}],"relativePath":"plugins/plugin-api.md"}'), _sfc_main = { name: "plugins/plugin-api.md" }, _hoisted_1 = /* @__PURE__ */ createStaticVNode(`<h1 id="plugin-api" tabindex="-1">Plugin API <a class="header-anchor" href="#plugin-api" aria-hidden="true">#</a></h1><p>By means of the <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/httpHooksApi.ts" target="_blank" rel="noreferrer">plugin api</a> it is possible to register hooks at important program points of httpYac.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">export</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">interface</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">HttpyacHooksApi</span><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> version</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">string</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> rootDir</span><span style="color:var(--shiki-token-keyword);">?:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">PathLike</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> httpFile</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Readonly</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-function);">HttpFile</span><span style="color:var(--shiki-color-text);">&gt;;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> config</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">EnvironmentConfig</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> hooks</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">HttpFileHooks</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> log</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">LogHandler</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> fileProvider</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">FileProvider</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> sessionStore</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">SessionStore</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> userInteractionProvider</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">UserInteractionProvider</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">getHookCancel</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">symbol</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-hidden="true">#</a></h2><ul><li>Type: <code>string</code></li></ul><p>The version string for the httpYac api version that is loading the plugin.</p><h2 id="rootdir" tabindex="-1">rootDir <a class="header-anchor" href="#rootdir" aria-hidden="true">#</a></h2><ul><li>Type: <code>string</code></li></ul><p>The project root directory of current http File.</p><h2 id="httpfile" tabindex="-1">httpFile <a class="header-anchor" href="#httpfile" aria-hidden="true">#</a></h2><ul><li>Type: <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/httpFile.ts#L7" target="_blank" rel="noreferrer"><code>HttpFile</code></a></li></ul><p>http file prepared for parsing, which has no regions yet.</p><h2 id="config" tabindex="-1">config <a class="header-anchor" href="#config" aria-hidden="true">#</a></h2><ul><li>Type: <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/environmentConfig.ts#L7" target="_blank" rel="noreferrer"><code>EnvironmentConfig</code></a></li></ul><p>Environment configuration determined for the current execution</p><h2 id="log" tabindex="-1">log <a class="header-anchor" href="#log" aria-hidden="true">#</a></h2><ul><li>Type: <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/logHandler.ts#L13" target="_blank" rel="noreferrer"><code>LogHandler</code></a></li></ul><p>The log module provides a simple debugging console. The output channel is redirected per use case</p><h2 id="fileprovider" tabindex="-1">fileProvider <a class="header-anchor" href="#fileprovider" aria-hidden="true">#</a></h2><ul><li>Type: <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/fileProvider.ts" target="_blank" rel="noreferrer"><code>FileProvider</code></a></li></ul><p>Data access layer for file access</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The VS Code extension also supports loading <a href="https://code.visualstudio.com/api/extension-guides/virtual-documents" target="_blank" rel="noreferrer">virtual documents</a>. Direct access via <code>fs</code> is not always possible.</p></div><h2 id="sessionstore" tabindex="-1">sessionStore <a class="header-anchor" href="#sessionstore" aria-hidden="true">#</a></h2><ul><li>Type: <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/sessionStore.ts" target="_blank" rel="noreferrer"><code>SessionStore</code></a></li></ul><p>Service to store user sessions. The user has the possibility to delete them manually</p><h2 id="userinteractionprovider" tabindex="-1">userInteractionProvider <a class="header-anchor" href="#userinteractionprovider" aria-hidden="true">#</a></h2><ul><li>Type: <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/environmentConfig.ts#L38" target="_blank" rel="noreferrer"><code>UserInteractionProvider</code></a></li></ul><p>enables interaction with the user</p><h2 id="gethookcancel" tabindex="-1">getHookCancel <a class="header-anchor" href="#gethookcancel" aria-hidden="true">#</a></h2><ul><li>Type: <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/hook.ts#L9" target="_blank" rel="noreferrer"><code>HookCancel Symbol</code></a></li></ul><p>function to retrieve javascript symbol, which is used to cancel execution of hooks</p><h2 id="hooks" tabindex="-1">hooks <a class="header-anchor" href="#hooks" aria-hidden="true">#</a></h2><ul><li>Type: <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/httpFileHooks.ts" target="_blank" rel="noreferrer">HttpFileHooks</a></li></ul><p>List of hooks for which own program logic can be registered</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">export</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">interface</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">HttpFileHooks</span><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> parse</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ParseHook</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> parseEndRegion</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ParseEndRegionHook</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> replaceVariable</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ReplaceVariableHook</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> provideEnvironments</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ProvideEnvironmentsHook</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> provideVariables</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ProvideVariablesHook</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> onRequest</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">OnRequestHook</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> onResponse</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">OnResponseHook</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">readonly</span><span style="color:var(--shiki-color-text);"> responseLogging</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ResponseLoggingHook</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>httpYac uses most of the hooks itself for its own application logic. Just look in the source code</p></div><h3 id="parsehook" tabindex="-1">ParseHook <a class="header-anchor" href="#parsehook" aria-hidden="true">#</a></h3><ul><li><p>Type: <code>function</code></p></li><li><p>Arguments:</p><ul><li><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/parserContext.ts#L9" target="_blank" rel="noreferrer"><code>getHttpLineGenerator</code></a> Generator to read lines of file</li><li><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/parserContext.ts#L12" target="_blank" rel="noreferrer"><code>ParserContext</code></a> context of file parsing</li></ul></li><li><p>Return: <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/httpRegionParserResult.ts#L8" target="_blank" rel="noreferrer"><code>HttpRegionParserResult</code></a></p></li></ul><p>hook for parsing http file. The goal is to determine and register the necessary actions for this line.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>As soon as a hook determines a result, the processing for this row is aborted and the subsequent hooks are not processed (BailHook).</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Hook <code>request</code> and <code>requestBody</code> always returns a result. It is necessary to register your own parser before this one</p></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">module</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (api) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">api</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">hooks</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">parse</span><span style="color:var(--shiki-token-function);">.addHook</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;getCoffee&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (getLineReader</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> context) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">lineReader</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getLineReader</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-color-text);"> next </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">lineReader</span><span style="color:var(--shiki-token-function);">.next</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">!</span><span style="color:var(--shiki-token-constant);">next</span><span style="color:var(--shiki-color-text);">.done) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-comment);">// regex match if line is javascript start line</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">match</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-token-string-expression);"> /</span><span style="color:var(--shiki-token-keyword);">^</span><span style="color:var(--shiki-token-string-expression);">\\s</span><span style="color:var(--shiki-token-keyword);">*</span><span style="color:var(--shiki-token-string-expression);">GET\\s</span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-token-string-expression);">coffee</span><span style="color:var(--shiki-token-keyword);">?$</span><span style="color:var(--shiki-token-string-expression);">/</span><span style="color:var(--shiki-token-keyword);">ui</span><span style="color:var(--shiki-token-function);">.test</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">next</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">value</span><span style="color:var(--shiki-color-text);">.textLine);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">!</span><span style="color:var(--shiki-color-text);">match) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-constant);">context</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">httpRegion</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">hooks</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">execute</span><span style="color:var(--shiki-token-function);">.addHook</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;get_coffee&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> context </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">context</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">scriptConsole</span><span style="color:var(--shiki-token-function);">?.info?.</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">\`get coffee\`</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> { </span><span style="color:var(--shiki-token-comment);">// return nextParserLine and symbol for lines</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        nextParserLine</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">next</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">value</span><span style="color:var(--shiki-color-text);">.line</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        symbols</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> [{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          name</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;coffee&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          description</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;coffee with some milk, no sugar&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          kind</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;comment&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          startLine</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">next</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">value</span><span style="color:var(--shiki-color-text);">.line</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          startOffset</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          endLine</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">next</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">value</span><span style="color:var(--shiki-color-text);">.line</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">          endOffset</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">next</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">value</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">textLine</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">length</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }]</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      };</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    before</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-string-expression);">&#39;request&#39;</span><span style="color:var(--shiki-color-text);">]</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p><a href="https://github.com/httpyac/httpyac.github.io/tree/main/examples/plugins/parseHook" target="_blank" rel="noreferrer">full example</a></p><h3 id="parseendregionhook" tabindex="-1">ParseEndRegionHook <a class="header-anchor" href="#parseendregionhook" aria-hidden="true">#</a></h3><ul><li><p>Type: <code>function</code></p></li><li><p>Arguments:</p><ul><li><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/parserContext.ts#L12" target="_blank" rel="noreferrer"><code>ParserContext</code></a> context of file parsing</li></ul></li><li><p>Return: <code>void</code></p></li></ul><p>hook after identifying new http region</p><h3 id="replacevariablehook" tabindex="-1">ReplaceVariableHook <a class="header-anchor" href="#replacevariablehook" aria-hidden="true">#</a></h3><ul><li><p>Type: <code>function</code></p></li><li><p>Arguments:</p><ul><li><code>string</code> text in which the variables are to be replaced</li><li><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/variableType.ts" target="_blank" rel="noreferrer"><code>VariableType | string</code></a> variableType or headerName</li><li><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/parserContext.ts#L12" target="_blank" rel="noreferrer"><code>ParserContext</code></a> context of file parsing</li></ul></li><li><p>Return: <code>string</code></p></li></ul><p>hook to replace variable in request line, header or request body</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">module</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (api) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">api</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">hooks</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">replaceVariable</span><span style="color:var(--shiki-token-function);">.addHook</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;changeXCoffeeHeader&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (text</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> type) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (type </span><span style="color:var(--shiki-token-keyword);">===</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;X-Coffee&#39;</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;Black&#39;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> text;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><a href="https://github.com/httpyac/httpyac.github.io/tree/main/examples/plugins/replaceVariableHook" target="_blank" rel="noreferrer">full example</a></p><h3 id="providevariableshook" tabindex="-1">ProvideVariablesHook <a class="header-anchor" href="#providevariableshook" aria-hidden="true">#</a></h3><ul><li><p>Type: <code>function</code></p></li><li><p>Arguments:</p><ul><li><code>string[] | undefined</code> list of environments</li><li><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/variableProviderContext.ts" target="_blank" rel="noreferrer"><code>VariableProviderContext</code></a> context to determine variables</li></ul></li><li><p>Return: <a href="https://github.com/AnWeber/httpyac/blob/main/src/models/variables.ts" target="_blank" rel="noreferrer"><code>Promise&lt;Variables&gt;</code></a> promise with Variables</p></li></ul><p>hook to provide custom variables</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-constant);">module</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (api) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">api</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">hooks</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">provideVariables</span><span style="color:var(--shiki-token-function);">.addHook</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;getCoffee&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (envs) {</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (envs </span><span style="color:var(--shiki-token-keyword);">&amp;&amp;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">envs</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">length</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">        system</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> envs[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">        coffee</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;coffee with milk, no sugar&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">      }</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">      system</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;none&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">      coffee</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;black&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">    };</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">api</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">hooks</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">provideEnvironments</span><span style="color:var(--shiki-token-function);">.addHook</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;getCoffeeEnvironments&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-string-expression);">&#39;kitchen&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;Riedbachstüberl&#39;</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><a href="https://github.com/httpyac/httpyac.github.io/tree/main/examples/plugins/provideVariablesHook" target="_blank" rel="noreferrer">full example</a></p><h3 id="provideenvironmentshook" tabindex="-1">ProvideEnvironmentsHook <a class="header-anchor" href="#provideenvironmentshook" aria-hidden="true">#</a></h3><ul><li><p>Type: <code>function</code></p></li><li><p>Arguments:</p><ul><li><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/variableProviderContext.ts" target="_blank" rel="noreferrer"><code>VariableProviderContext</code></a> context to determine variables</li></ul></li><li><p>Return: <code>Promise&lt;string[]&gt;</code> list of possible environments</p></li></ul><p>hook to provide environments</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables has-highlighted-lines"><code><span class="line"><span style="color:var(--shiki-token-constant);">module</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (api) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">api</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">hooks</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">provideVariables</span><span style="color:var(--shiki-token-function);">.addHook</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;getCoffee&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (envs) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (envs </span><span style="color:var(--shiki-token-keyword);">&amp;&amp;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">envs</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">length</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        system</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> envs[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        coffee</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;coffee with milk, no sugar&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      system</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;none&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      coffee</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;black&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    };</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">api</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">hooks</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">provideEnvironments</span><span style="color:var(--shiki-token-function);">.addHook</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;getCoffeeEnvironments&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> () {</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-string-expression);">&#39;kitchen&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;Riedbachstüberl&#39;</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line highlighted"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><a href="https://github.com/httpyac/httpyac.github.io/tree/main/examples/plugins/provideVariablesHook" target="_blank" rel="noreferrer">full example</a></p><h3 id="onrequest-hook" tabindex="-1">OnRequest Hook <a class="header-anchor" href="#onrequest-hook" aria-hidden="true">#</a></h3><ul><li><p>Type: <code>function</code></p></li><li><p>Arguments:</p><ul><li><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/httpRequest.ts" target="_blank" rel="noreferrer"><code>HttpRequest</code></a> current request</li><li><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/processorContext.ts#L39" target="_blank" rel="noreferrer"><code>ProcessorContext</code></a></li></ul></li><li><p>Return: <code>Promise&lt;void&gt;</code></p></li></ul><p>hook called before every request call</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">module</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (api) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">api</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">hooks</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">onRequest</span><span style="color:var(--shiki-token-function);">.addHook</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;getCoffee&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (request) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">request</span><span style="color:var(--shiki-color-text);">.headers </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-function);">.assign</span><span style="color:var(--shiki-color-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-string-expression);">&#39;X-Coffee&#39;</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-string-expression);">&#39;coffee with milk, no sugar&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">     }</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">request</span><span style="color:var(--shiki-color-text);">.headers);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><a href="https://github.com/httpyac/httpyac.github.io/tree/main/examples/plugins/requestHook" target="_blank" rel="noreferrer">full example</a></p><h3 id="onresponse-hook" tabindex="-1">OnResponse Hook <a class="header-anchor" href="#onresponse-hook" aria-hidden="true">#</a></h3><ul><li><p>Type: <code>function</code></p></li><li><p>Arguments:</p><ul><li><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/httpResponse.ts" target="_blank" rel="noreferrer"><code>HttpResponse</code></a> response of request</li><li><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/processorContext.ts#L39" target="_blank" rel="noreferrer"><code>ProcessorContext</code></a></li></ul></li><li><p>Return: <code>Promise&lt;void&gt;</code></p></li></ul><p>hook called after every response</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">module</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (api) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">api</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">hooks</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">onResponse</span><span style="color:var(--shiki-token-function);">.addHook</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;getCoffee&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (response) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">response</span><span style="color:var(--shiki-color-text);">.body </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;coffee with milk, no sugar&#39;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">delete</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">response</span><span style="color:var(--shiki-color-text);">.parsedBody;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">delete</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">response</span><span style="color:var(--shiki-color-text);">.prettyPrintBody;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><a href="https://github.com/httpyac/httpyac.github.io/tree/main/examples/plugins/responseHook" target="_blank" rel="noreferrer">full example</a></p><h3 id="responselogginghook" tabindex="-1">ResponseLoggingHook <a class="header-anchor" href="#responselogginghook" aria-hidden="true">#</a></h3><ul><li><p>Type: <code>function</code></p></li><li><p>Arguments:</p><ul><li><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/httpResponse.ts" target="_blank" rel="noreferrer"><code>HttpResponse</code></a> response of request</li><li><a href="https://github.com/AnWeber/httpyac/blob/main/src/models/processorContext.ts#L39" target="_blank" rel="noreferrer"><code>ProcessorContext</code></a></li></ul></li><li><p>Return: <code>Promise&lt;void&gt;</code></p></li></ul><p>hook called for every logging of a response.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">module</span><span style="color:var(--shiki-color-text);">.</span><span style="color:var(--shiki-token-constant);">exports</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (api) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-constant);">api</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">hooks</span><span style="color:var(--shiki-token-function);">.</span><span style="color:var(--shiki-token-constant);">responseLogging</span><span style="color:var(--shiki-token-function);">.addHook</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;removeHeadersAndRequest&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-color-text);"> (response) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">delete</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">response</span><span style="color:var(--shiki-color-text);">.headers;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">delete</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">response</span><span style="color:var(--shiki-color-text);">.request;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> response;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  });</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><a href="https://github.com/httpyac/httpyac.github.io/tree/main/examples/plugins/responseLoggingHook" target="_blank" rel="noreferrer">full example</a></p>`, 76), _hoisted_77 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_77);
}
const pluginApi = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  pluginApi as default
};
