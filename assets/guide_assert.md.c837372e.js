import { _ as _export_sfc, o as openBlock, c as createElementBlock, a as createStaticVNode } from "./app.18e01c26.js";
const __pageData = JSON.parse('{"title":"Assert","description":"","frontmatter":{},"headers":[{"level":2,"title":"Assert Syntax","slug":"assert-syntax","link":"#assert-syntax","children":[{"level":3,"title":"Conditions","slug":"conditions","link":"#conditions","children":[]},{"level":3,"title":"Status Assert","slug":"status-assert","link":"#status-assert","children":[]},{"level":3,"title":"Header Assert","slug":"header-assert","link":"#header-assert","children":[]},{"level":3,"title":"Duration Assert","slug":"duration-assert","link":"#duration-assert","children":[]},{"level":3,"title":"Body Assert","slug":"body-assert","link":"#body-assert","children":[]},{"level":3,"title":"Javascript Assert","slug":"javascript-assert","link":"#javascript-assert","children":[]},{"level":3,"title":"XPath Assert","slug":"xpath-assert","link":"#xpath-assert","children":[]}]},{"level":2,"title":"Extended Asserts","slug":"extended-asserts","link":"#extended-asserts","children":[]}],"relativePath":"guide/assert.md"}'), _sfc_main = { name: "guide/assert.md" }, _hoisted_1 = /* @__PURE__ */ createStaticVNode(`<h1 id="assert" tabindex="-1">Assert <a class="header-anchor" href="#assert" aria-hidden="true">#</a></h1><p>You can write easily test scripts in JavaScript. Tests allow you to ensure that your API is working as expected, to establish that integrations between services are functioning reliably, and to verify that new developments haven&#39;t broken any existing functionality. You can also use test code to aid the debugging process when something goes wrong with your API project.</p><h2 id="assert-syntax" tabindex="-1">Assert Syntax <a class="header-anchor" href="#assert-syntax" aria-hidden="true">#</a></h2><p>Simple Assertions are started using <code>??</code> followed by the field which should be checked. After the field follows the condition and the expected result.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> https://httpbin.org/anything</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">?? status == 200</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="conditions" tabindex="-1">Conditions <a class="header-anchor" href="#conditions" aria-hidden="true">#</a></h3><p>Conidtions are used to assert the field of the response</p><table><thead><tr><th>Condition</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>== / equals</td><td>Field and expected value are equals</td><td><code>?? status == 200</code></td></tr><tr><td>!=</td><td>Field and expected value are not equals</td><td><code>?? status != 201</code></td></tr><tr><td>&gt;</td><td>Field is greater as expected</td><td><code>?? status &gt; 199</code></td></tr><tr><td>&gt;=</td><td>Field is greater or euqals as expected</td><td><code>?? status &gt;= 200</code></td></tr><tr><td>&lt;</td><td>Field is lower as expected</td><td><code>?? duration &lt; 300</code></td></tr><tr><td>&lt;=</td><td>Field is lower or euqals as expected</td><td><code>?? status &lt;= 200</code></td></tr><tr><td>startsWith</td><td>Field starts with expected</td><td><code>?? status startsWith 20</code></td></tr><tr><td>endsWith</td><td>Field end with expected</td><td><code>?? status startsWith 00</code></td></tr><tr><td>includes / contains</td><td>Field includes expected</td><td><code>?? header content-type includes json</code></td></tr><tr><td>exists / isTrue</td><td>Field exists/ is truthy</td><td><code>?? header range exists</code></td></tr><tr><td>isFalse</td><td>Field is falsy</td><td><code>?? header range isFalse</code></td></tr><tr><td>isNumber</td><td>Field is number</td><td><code>?? status isNumber</code></td></tr><tr><td>isBooelan</td><td>Field is boolean</td><td><code>?? body active isBooelan</code></td></tr><tr><td>isString</td><td>Field is string</td><td><code>?? header content-type isString</code></td></tr><tr><td>isArray</td><td>Field is Array</td><td><code>?? body links isArray</code></td></tr><tr><td>matches</td><td>Field matches expected regex</td><td><code>?? status matches ^\\\\d+</code></td></tr><tr><td>sha256</td><td>Field matches sha256 hash</td><td><code>?? body sha256 eji/gfOD9pQzrW6QDTWz4jhVk/dqe3q11DVbi6Qe4ks=</code></td></tr><tr><td>sha512</td><td>Field matches sha512 hash</td><td><code>?? body sha512 DbaK1OQdOya6P8SKXafJ9ha4E+d8tOlRGH4fKjfCutlAQQififYBLue0TiH4Y8XZVT47Zl7a6GQLsidLVVJm6w==</code></td></tr><tr><td>md5</td><td>Field matches md5 hash</td><td><code>?? body md5 m7WPJhkuS6APAeLnsTa72A==</code></td></tr></tbody></table><h3 id="status-assert" tabindex="-1">Status Assert <a class="header-anchor" href="#status-assert" aria-hidden="true">#</a></h3><p>Check the received HTTP response status code. Status assert consists of the keyword status followed by a condition and a expected value.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> https://httpbin.org/anything</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">?? status == 200</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="header-assert" tabindex="-1">Header Assert <a class="header-anchor" href="#header-assert" aria-hidden="true">#</a></h3><p>Check the value of a received response header. Header assert consists of the keyword header followed by the name of the header and a valid condition.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> https://httpbin.org/anything</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">?? header content-type == application/json</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="duration-assert" tabindex="-1">Duration Assert <a class="header-anchor" href="#duration-assert" aria-hidden="true">#</a></h3><p>Check the total duration (sending plus receiving time in milliseconds) of the request. Use keyword duration followed by a optional Timings Identifer (firstByte, download, wait, request, tcp, tls, total) and a condition.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> https://httpbin.org/anything</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">?? duration &lt; 200</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="body-assert" tabindex="-1">Body Assert <a class="header-anchor" href="#body-assert" aria-hidden="true">#</a></h3><p>Check the value of the received HTTP response body when decoded as a string. Body assert consists of the keyword body followed by a condition and the expected value.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> https://httpbin.org/anything</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">?? body includes slide</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>If the body is JSON you could also assert spefic fields of the body. You could use keyword body followed by the property name and a condition to assert the property.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> https://httpbin.org/anything</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">?? body form exists</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="javascript-assert" tabindex="-1">Javascript Assert <a class="header-anchor" href="#javascript-assert" aria-hidden="true">#</a></h3><p>With Javascript Assert you could assert already extracted variables or more complex field access logic. You could use keyword js followed by the Javascript to execute and a condition to assert the field</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> https://httpbin.org/json</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">?? js response.parsedBody.slideshow.slides[0].title == Wake up to WonderWidgets!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="xpath-assert" tabindex="-1">XPath Assert <a class="header-anchor" href="#xpath-assert" aria-hidden="true">#</a></h3><p>Check the value of a XPath query on the received HTTP body decoded as a string. XPath assert consists of the keyword xpath followed by a condition and a expected value.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> https://httpbin.org/xml</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">?? xpath /slideshow/@title == Sample Slide Show</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="extended-asserts" tabindex="-1">Extended Asserts <a class="header-anchor" href="#extended-asserts" aria-hidden="true">#</a></h2><p>To enable more complex checks, these can also be executed via script tags. For this purpose an auxiliary method <code>test</code> is offered.</p><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> https://httpbin.org/json</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">{{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  const { equal } = require(&#39;assert&#39;);</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  test(&#39;status code 200&#39;, () =&gt; {</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    equal(response.statusCode, 200);</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  });</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">}}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> https://httpbin.org/json</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">{{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  const { expect } = require(&#39;chai&#39;);</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  test(&#39;status code 200&#39;, () =&gt; {</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    expect(response.statusCode).to.equal(200)</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  });</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="https://github.com/AnWeber/httpyac/blob/790a1b0409bd9eed6ef0ff26a2fc017952d58231/src/models/testFunction.ts#L6-L14" target="_blank" rel="noreferrer">Auxiliary methods</a> are provided for standard tests such as Status and Content-Type</p></div><div class="language-http line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">GET</span><span style="color:#A6ACCD;"> https://httpbin.org/json</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">{{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  test.status(200);</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  test.totalTime(300);</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  test.header(&quot;content-type&quot;, &quot;application/json&quot;);</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  test.headerContains(&quot;content-type&quot;, &quot;json&quot;);</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  test.responseBody(&#39;{&quot;foo&quot;: &quot;bar&quot;}&#39;);</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  test.hasResponseBody();</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">  // test.hasNoResponseBody();</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">}}</span></span>
<span class="line highlighted"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`, 34), _hoisted_35 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_35);
}
const assert = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  assert as default
};
